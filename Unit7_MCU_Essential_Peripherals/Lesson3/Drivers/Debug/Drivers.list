
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000041c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800054c  08000554  00010554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800054c  0800054c  00010554  2**0
                  CONTENTS
  4 .ARM          00000000  0800054c  0800054c  00010554  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800054c  08000554  00010554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800054c  0800054c  0001054c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000550  08000550  00010550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000554  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000554  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010554  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001949  00000000  00000000  0001057d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000041c  00000000  00000000  00011ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000408  00000000  00000000  000122e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b8  00000000  00000000  000126f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  000127a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001af7  00000000  00000000  00012838  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000c85  00000000  00000000  0001432f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007632  00000000  00000000  00014fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c5e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000021c  00000000  00000000  0001c664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000534 	.word	0x08000534

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000534 	.word	0x08000534

08000170 <my_wait>:
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include "stm32f013x6.h"
#include "Stm32_F103C6_GPIO_Driver.h"
void my_wait(int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	volatile unsigned int i , j;
	for(int i = 0; i < x ; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	617b      	str	r3, [r7, #20]
 800017c:	e00b      	b.n	8000196 <my_wait+0x26>
	{
		for(int j = 0; j < 255 ; j++) ;
 800017e:	2300      	movs	r3, #0
 8000180:	613b      	str	r3, [r7, #16]
 8000182:	e002      	b.n	800018a <my_wait+0x1a>
 8000184:	693b      	ldr	r3, [r7, #16]
 8000186:	3301      	adds	r3, #1
 8000188:	613b      	str	r3, [r7, #16]
 800018a:	693b      	ldr	r3, [r7, #16]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	ddf9      	ble.n	8000184 <my_wait+0x14>
	for(int i = 0; i < x ; i++)
 8000190:	697b      	ldr	r3, [r7, #20]
 8000192:	3301      	adds	r3, #1
 8000194:	617b      	str	r3, [r7, #20]
 8000196:	697a      	ldr	r2, [r7, #20]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	dbef      	blt.n	800017e <my_wait+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	371c      	adds	r7, #28
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <clock_init>:
void clock_init(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	// GPIOA clock enable
	RCC_GPIOA_CLK_EN();
 80001ac:	4b07      	ldr	r3, [pc, #28]	; (80001cc <clock_init+0x24>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a06      	ldr	r2, [pc, #24]	; (80001cc <clock_init+0x24>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6193      	str	r3, [r2, #24]

	// GPIOB clock enable
	RCC_GPIOB_CLK_EN();
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <clock_init+0x24>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <clock_init+0x24>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	40021000 	.word	0x40021000

080001d0 <main>:
//	GPIOB_CRH |= (0b01 << 20) ;
//	GPIOB_CRH &= ~(0b11 << 22) ;
//
//}
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
	clock_init();
 80001d6:	f7ff ffe7 	bl	80001a8 <clock_init>
	// GPIO Init
	GPIO_PinConfig PinCfg ;

	//PA1 Input HighZ
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80001da:	2301      	movs	r3, #1
 80001dc:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80001de:	2302      	movs	r3, #2
 80001e0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	4619      	mov	r1, r3
 80001e6:	4824      	ldr	r0, [pc, #144]	; (8000278 <main+0xa8>)
 80001e8:	f000 f8d5 	bl	8000396 <MCAL_GPIO_Init>

	//PB1 Output PP Mode , Speed 10 MHz.
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80001f4:	2302      	movs	r3, #2
 80001f6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	4619      	mov	r1, r3
 80001fc:	481f      	ldr	r0, [pc, #124]	; (800027c <main+0xac>)
 80001fe:	f000 f8ca 	bl	8000396 <MCAL_GPIO_Init>

	//PA13 Input HighZ
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000202:	2301      	movs	r3, #1
 8000204:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800020a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	4819      	ldr	r0, [pc, #100]	; (8000278 <main+0xa8>)
 8000212:	f000 f8c0 	bl	8000396 <MCAL_GPIO_Init>

	//PB13 Output PP Mode , Speed 10 MHz.
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000216:	2304      	movs	r3, #4
 8000218:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 800021a:	2301      	movs	r3, #1
 800021c:	71fb      	strb	r3, [r7, #7]
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800021e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000222:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4814      	ldr	r0, [pc, #80]	; (800027c <main+0xac>)
 800022a:	f000 f8b4 	bl	8000396 <MCAL_GPIO_Init>

	/* Super Loop */
	while(1)
	{
		// PA1 is connected to external PUR
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) // single press
 800022e:	2102      	movs	r1, #2
 8000230:	4811      	ldr	r0, [pc, #68]	; (8000278 <main+0xa8>)
 8000232:	f000 f92f 	bl	8000494 <MCAL_GPIO_ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d10b      	bne.n	8000254 <main+0x84>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800023c:	2102      	movs	r1, #2
 800023e:	480f      	ldr	r0, [pc, #60]	; (800027c <main+0xac>)
 8000240:	f000 f942 	bl	80004c8 <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) ;
 8000244:	bf00      	nop
 8000246:	2102      	movs	r1, #2
 8000248:	480b      	ldr	r0, [pc, #44]	; (8000278 <main+0xa8>)
 800024a:	f000 f923 	bl	8000494 <MCAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f8      	beq.n	8000246 <main+0x76>
		}
		// PA13 is connected to external PDR
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1) // multiple press
 8000254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <main+0xa8>)
 800025a:	f000 f91b 	bl	8000494 <MCAL_GPIO_ReadPin>
 800025e:	4603      	mov	r3, r0
 8000260:	2b01      	cmp	r3, #1
 8000262:	d104      	bne.n	800026e <main+0x9e>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <main+0xac>)
 800026a:	f000 f92d 	bl	80004c8 <MCAL_GPIO_TogglePin>

		}
		my_wait(1);
 800026e:	2001      	movs	r0, #1
 8000270:	f7ff ff7e 	bl	8000170 <my_wait>
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) // single press
 8000274:	e7db      	b.n	800022e <main+0x5e>
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800
 800027c:	40010c00 	.word	0x40010c00

08000280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000284:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480c      	ldr	r0, [pc, #48]	; (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 800028a:	490d      	ldr	r1, [pc, #52]	; (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a0:	4c0a      	ldr	r4, [pc, #40]	; (80002cc <LoopForever+0x16>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ae:	f000 f91d 	bl	80004ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f7ff ff8d 	bl	80001d0 <main>

080002b6 <LoopForever>:

LoopForever:
    b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c4:	08000554 	.word	0x08000554
  ldr r2, =_sbss
 80002c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC1_2_IRQHandler>

080002d2 <Get_CRLH_Position>:
#include "Stm32_F103C6_GPIO_Driver.h"

//==================================

uint8_t Get_CRLH_Position(uint32_t PinNumber)
{
 80002d2:	b480      	push	{r7}
 80002d4:	b083      	sub	sp, #12
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
	switch(PinNumber)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b80      	cmp	r3, #128	; 0x80
 80002de:	d042      	beq.n	8000366 <Get_CRLH_Position+0x94>
 80002e0:	2b80      	cmp	r3, #128	; 0x80
 80002e2:	d811      	bhi.n	8000308 <Get_CRLH_Position+0x36>
 80002e4:	2b08      	cmp	r3, #8
 80002e6:	d036      	beq.n	8000356 <Get_CRLH_Position+0x84>
 80002e8:	2b08      	cmp	r3, #8
 80002ea:	d806      	bhi.n	80002fa <Get_CRLH_Position+0x28>
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d02e      	beq.n	800034e <Get_CRLH_Position+0x7c>
 80002f0:	2b04      	cmp	r3, #4
 80002f2:	d02e      	beq.n	8000352 <Get_CRLH_Position+0x80>
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d028      	beq.n	800034a <Get_CRLH_Position+0x78>
 80002f8:	e047      	b.n	800038a <Get_CRLH_Position+0xb8>
 80002fa:	2b20      	cmp	r3, #32
 80002fc:	d02f      	beq.n	800035e <Get_CRLH_Position+0x8c>
 80002fe:	2b40      	cmp	r3, #64	; 0x40
 8000300:	d02f      	beq.n	8000362 <Get_CRLH_Position+0x90>
 8000302:	2b10      	cmp	r3, #16
 8000304:	d029      	beq.n	800035a <Get_CRLH_Position+0x88>
 8000306:	e040      	b.n	800038a <Get_CRLH_Position+0xb8>
 8000308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800030c:	d033      	beq.n	8000376 <Get_CRLH_Position+0xa4>
 800030e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000312:	d809      	bhi.n	8000328 <Get_CRLH_Position+0x56>
 8000314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000318:	d029      	beq.n	800036e <Get_CRLH_Position+0x9c>
 800031a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800031e:	d028      	beq.n	8000372 <Get_CRLH_Position+0xa0>
 8000320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000324:	d021      	beq.n	800036a <Get_CRLH_Position+0x98>
 8000326:	e030      	b.n	800038a <Get_CRLH_Position+0xb8>
 8000328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800032c:	d027      	beq.n	800037e <Get_CRLH_Position+0xac>
 800032e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000332:	d803      	bhi.n	800033c <Get_CRLH_Position+0x6a>
 8000334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000338:	d01f      	beq.n	800037a <Get_CRLH_Position+0xa8>
 800033a:	e026      	b.n	800038a <Get_CRLH_Position+0xb8>
 800033c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000340:	d01f      	beq.n	8000382 <Get_CRLH_Position+0xb0>
 8000342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000346:	d01e      	beq.n	8000386 <Get_CRLH_Position+0xb4>
 8000348:	e01f      	b.n	800038a <Get_CRLH_Position+0xb8>
	{
	case GPIO_PIN_0:
		return 0;
 800034a:	2300      	movs	r3, #0
 800034c:	e01e      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_1:
		return 4;
 800034e:	2304      	movs	r3, #4
 8000350:	e01c      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_2:
		return 8;
 8000352:	2308      	movs	r3, #8
 8000354:	e01a      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_3:
		return 12;
 8000356:	230c      	movs	r3, #12
 8000358:	e018      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_4:
		return 16;
 800035a:	2310      	movs	r3, #16
 800035c:	e016      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_5:
		return 20;
 800035e:	2314      	movs	r3, #20
 8000360:	e014      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_6:
		return 24;
 8000362:	2318      	movs	r3, #24
 8000364:	e012      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_7:
		return 28;
 8000366:	231c      	movs	r3, #28
 8000368:	e010      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_8:
		return 0;
 800036a:	2300      	movs	r3, #0
 800036c:	e00e      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_9:
		return 4;
 800036e:	2304      	movs	r3, #4
 8000370:	e00c      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_10:
		return 8;
 8000372:	2308      	movs	r3, #8
 8000374:	e00a      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_11:
		return 12;
 8000376:	230c      	movs	r3, #12
 8000378:	e008      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_12:
		return 16;
 800037a:	2310      	movs	r3, #16
 800037c:	e006      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_13:
		return 20;
 800037e:	2314      	movs	r3, #20
 8000380:	e004      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_14:
		return 24;
 8000382:	2318      	movs	r3, #24
 8000384:	e002      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	case GPIO_PIN_15:
		return 28;
 8000386:	231c      	movs	r3, #28
 8000388:	e000      	b.n	800038c <Get_CRLH_Position+0xba>
		break;
	}
	return 0;
 800038a:	2300      	movs	r3, #0
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr

08000396 <MCAL_GPIO_Init>:
 * Note			-Stm32f103c6 MCU has GPIO A,B,C,D,E Modules
 * 				 but LQFP48 has only GPIO A,B and Part of C,D Exported as external pins from the MCU
 */

void MCAL_GPIO_Init(GPIO_Typedef *GPIOx, GPIO_PinConfig* PinConfig)
{
 8000396:	b590      	push	{r4, r7, lr}
 8000398:	b085      	sub	sp, #20
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
 800039e:	6039      	str	r1, [r7, #0]
	volatile uint32_t* ConfigRegister = NULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	2bff      	cmp	r3, #255	; 0xff
 80003ae:	d801      	bhi.n	80003b4 <MCAL_GPIO_Init+0x1e>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	e001      	b.n	80003b8 <MCAL_GPIO_Init+0x22>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3304      	adds	r3, #4
 80003b8:	60bb      	str	r3, [r7, #8]

	// Clear CNF1[1:0] MODE1[1:0]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	881b      	ldrh	r3, [r3, #0]
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ff87 	bl	80002d2 <Get_CRLH_Position>
 80003c4:	4603      	mov	r3, r0
 80003c6:	461a      	mov	r2, r3
 80003c8:	230f      	movs	r3, #15
 80003ca:	4093      	lsls	r3, r2
 80003cc:	43da      	mvns	r2, r3
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	401a      	ands	r2, r3
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	601a      	str	r2, [r3, #0]

	// If Pin is Output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_ALT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_ALT_PP || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP  )
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	789b      	ldrb	r3, [r3, #2]
 80003dc:	2b07      	cmp	r3, #7
 80003de:	d00b      	beq.n	80003f8 <MCAL_GPIO_Init+0x62>
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	789b      	ldrb	r3, [r3, #2]
 80003e4:	2b06      	cmp	r3, #6
 80003e6:	d007      	beq.n	80003f8 <MCAL_GPIO_Init+0x62>
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	789b      	ldrb	r3, [r3, #2]
 80003ec:	2b05      	cmp	r3, #5
 80003ee:	d003      	beq.n	80003f8 <MCAL_GPIO_Init+0x62>
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	789b      	ldrb	r3, [r3, #2]
 80003f4:	2b04      	cmp	r3, #4
 80003f6:	d10e      	bne.n	8000416 <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) &0x0F) ;
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	789b      	ldrb	r3, [r3, #2]
 80003fc:	3b04      	subs	r3, #4
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	b25a      	sxtb	r2, r3
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	78db      	ldrb	r3, [r3, #3]
 8000406:	b25b      	sxtb	r3, r3
 8000408:	4313      	orrs	r3, r2
 800040a:	b25b      	sxtb	r3, r3
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 030f 	and.w	r3, r3, #15
 8000412:	73fb      	strb	r3, [r7, #15]
 8000414:	e02c      	b.n	8000470 <MCAL_GPIO_Init+0xda>

	}
	// If Pin is Input
	else //MODE = 00: Input mode (reset state)
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_ANALOG || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO )
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	789b      	ldrb	r3, [r3, #2]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <MCAL_GPIO_Init+0x90>
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	789b      	ldrb	r3, [r3, #2]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d107      	bne.n	8000436 <MCAL_GPIO_Init+0xa0>
		{
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | 0x0) &0x0F) ;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	789b      	ldrb	r3, [r3, #2]
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	b2db      	uxtb	r3, r3
 800042e:	f003 030f 	and.w	r3, r3, #15
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	e01c      	b.n	8000470 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_ALT_INPUT)  // Consider it as input floating
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	789b      	ldrb	r3, [r3, #2]
 800043a:	2b08      	cmp	r3, #8
 800043c:	d102      	bne.n	8000444 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0) &0x0F) ;
 800043e:	2304      	movs	r3, #4
 8000440:	73fb      	strb	r3, [r7, #15]
 8000442:	e015      	b.n	8000470 <MCAL_GPIO_Init+0xda>
		}
		else // PU PD
		{
			//			Table 20. Port bit configuration table

			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) &0x0F) ;
 8000444:	2308      	movs	r3, #8
 8000446:	73fb      	strb	r3, [r7, #15]
			if(PinConfig ->GPIO_MODE == GPIO_MODE_INPUT_PU) // Write 1 on the PxODR register
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	789b      	ldrb	r3, [r3, #2]
 800044c:	2b02      	cmp	r3, #2
 800044e:	d107      	bne.n	8000460 <MCAL_GPIO_Init+0xca>
			{
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	8812      	ldrh	r2, [r2, #0]
 8000458:	431a      	orrs	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	e007      	b.n	8000470 <MCAL_GPIO_Init+0xda>
			}
			else // Write 0 on the PxODR register
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	683a      	ldr	r2, [r7, #0]
 8000466:	8812      	ldrh	r2, [r2, #0]
 8000468:	43d2      	mvns	r2, r2
 800046a:	401a      	ands	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CRL Or CRH
	(*ConfigRegister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)  );
 8000470:	7bfc      	ldrb	r4, [r7, #15]
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff2b 	bl	80002d2 <Get_CRLH_Position>
 800047c:	4603      	mov	r3, r0
 800047e:	fa04 f203 	lsl.w	r2, r4, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	431a      	orrs	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	601a      	str	r2, [r3, #0]


}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bd90      	pop	{r4, r7, pc}

08000494 <MCAL_GPIO_ReadPin>:
 * @param [in]  -PinNumber to read the data from
 * @retval		-The input pin Value
 * Note			-None
 */
uint16_t MCAL_GPIO_ReadPin(GPIO_Typedef *GPIOx, uint16_t PinNumber)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]

	if(((GPIOx->IDR) & PinNumber) != GPIO_STATUS_RESET )
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	689a      	ldr	r2, [r3, #8]
 80004a8:	887b      	ldrh	r3, [r7, #2]
 80004aa:	4013      	ands	r3, r2
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d002      	beq.n	80004b6 <MCAL_GPIO_ReadPin+0x22>
	{
		bitStatus = (uint8_t)GPIO_STATUS_SET;
 80004b0:	2301      	movs	r3, #1
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	e001      	b.n	80004ba <MCAL_GPIO_ReadPin+0x26>
	}
	else
	{
		bitStatus = (uint8_t)GPIO_STATUS_RESET;
 80004b6:	2300      	movs	r3, #0
 80004b8:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	b29b      	uxth	r3, r3
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <MCAL_GPIO_TogglePin>:
 * @param [in] 	-PinNumber to toggle the data on
 * @retval		-None
 * Note			-None
 */
void MCAL_GPIO_TogglePin(GPIO_Typedef *GPIOx, uint16_t PinNumber)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (PinNumber);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	68da      	ldr	r2, [r3, #12]
 80004d8:	887b      	ldrh	r3, [r7, #2]
 80004da:	405a      	eors	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	60da      	str	r2, [r3, #12]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
	...

080004ec <__libc_init_array>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	2500      	movs	r5, #0
 80004f0:	4e0c      	ldr	r6, [pc, #48]	; (8000524 <__libc_init_array+0x38>)
 80004f2:	4c0d      	ldr	r4, [pc, #52]	; (8000528 <__libc_init_array+0x3c>)
 80004f4:	1ba4      	subs	r4, r4, r6
 80004f6:	10a4      	asrs	r4, r4, #2
 80004f8:	42a5      	cmp	r5, r4
 80004fa:	d109      	bne.n	8000510 <__libc_init_array+0x24>
 80004fc:	f000 f81a 	bl	8000534 <_init>
 8000500:	2500      	movs	r5, #0
 8000502:	4e0a      	ldr	r6, [pc, #40]	; (800052c <__libc_init_array+0x40>)
 8000504:	4c0a      	ldr	r4, [pc, #40]	; (8000530 <__libc_init_array+0x44>)
 8000506:	1ba4      	subs	r4, r4, r6
 8000508:	10a4      	asrs	r4, r4, #2
 800050a:	42a5      	cmp	r5, r4
 800050c:	d105      	bne.n	800051a <__libc_init_array+0x2e>
 800050e:	bd70      	pop	{r4, r5, r6, pc}
 8000510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000514:	4798      	blx	r3
 8000516:	3501      	adds	r5, #1
 8000518:	e7ee      	b.n	80004f8 <__libc_init_array+0xc>
 800051a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800051e:	4798      	blx	r3
 8000520:	3501      	adds	r5, #1
 8000522:	e7f2      	b.n	800050a <__libc_init_array+0x1e>
 8000524:	0800054c 	.word	0x0800054c
 8000528:	0800054c 	.word	0x0800054c
 800052c:	0800054c 	.word	0x0800054c
 8000530:	08000550 	.word	0x08000550

08000534 <_init>:
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	bf00      	nop
 8000538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053a:	bc08      	pop	{r3}
 800053c:	469e      	mov	lr, r3
 800053e:	4770      	bx	lr

08000540 <_fini>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	bf00      	nop
 8000544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000546:	bc08      	pop	{r3}
 8000548:	469e      	mov	lr, r3
 800054a:	4770      	bx	lr
