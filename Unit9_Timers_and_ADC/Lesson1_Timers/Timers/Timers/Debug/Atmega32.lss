
Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b51  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ec  00000000  00000000  00000eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ad  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00001a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005af  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000341  00000000  00000000  000021a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_10>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  74:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TIMER0_Init>:
	CALLBACK_CM = callback;
}

void TIMER0_CALLBACK_Overflow_INTERRUPT(PTR_VoidFuncVoid_t callback)
{
	CALLBACK_OVF = callback;
  7c:	00 97       	sbiw	r24, 0x00	; 0
  7e:	79 f1       	breq	.+94     	; 0xde <TIMER0_Init+0x62>
  80:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <TIMER0_Configurations+0x1>
  84:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TIMER0_Configurations>
  88:	fc 01       	movw	r30, r24
  8a:	80 81       	ld	r24, Z
  8c:	88 23       	and	r24, r24
  8e:	11 f0       	breq	.+4      	; 0x94 <TIMER0_Init+0x18>
  90:	88 30       	cpi	r24, 0x08	; 8
  92:	19 f4       	brne	.+6      	; 0x9a <TIMER0_Init+0x1e>
  94:	93 b7       	in	r25, 0x33	; 51
  96:	89 2b       	or	r24, r25
  98:	83 bf       	out	0x33, r24	; 51
  9a:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <TIMER0_Configurations>
  9e:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <TIMER0_Configurations+0x1>
  a2:	83 81       	ldd	r24, Z+3	; 0x03
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	18 f4       	brcc	.+6      	; 0xae <TIMER0_Init+0x32>
  a8:	93 b7       	in	r25, 0x33	; 51
  aa:	89 2b       	or	r24, r25
  ac:	83 bf       	out	0x33, r24	; 51
  ae:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <TIMER0_Configurations>
  b2:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <TIMER0_Configurations+0x1>
  b6:	81 81       	ldd	r24, Z+1	; 0x01
  b8:	88 23       	and	r24, r24
  ba:	11 f0       	breq	.+4      	; 0xc0 <TIMER0_Init+0x44>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	19 f4       	brne	.+6      	; 0xc6 <TIMER0_Init+0x4a>
  c0:	99 b7       	in	r25, 0x39	; 57
  c2:	89 2b       	or	r24, r25
  c4:	89 bf       	out	0x39, r24	; 57
  c6:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <TIMER0_Configurations>
  ca:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <TIMER0_Configurations+0x1>
  ce:	82 81       	ldd	r24, Z+2	; 0x02
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	38 f4       	brcc	.+14     	; 0xe2 <TIMER0_Init+0x66>
  d4:	99 b7       	in	r25, 0x39	; 57
  d6:	89 2b       	or	r24, r25
  d8:	89 bf       	out	0x39, r24	; 57
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	08 95       	ret
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	08 95       	ret
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	08 95       	ret

000000e6 <TIMER0_SetCompareValue>:
  e6:	8c bf       	out	0x3c, r24	; 60
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	08 95       	ret

000000ec <TIMER0_CALLBACK_CompareMatch_INTERRUPT>:
  ec:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <CALLBACK_CM+0x1>
  f0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <CALLBACK_CM>
  f4:	08 95       	ret

000000f6 <__vector_10>:
}

ISR(TIMER0_COMP_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	CALLBACK_CM();
 118:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <CALLBACK_CM>
 11c:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <CALLBACK_CM+0x1>
 120:	09 95       	icall
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	u8_TOVNumber++;
 166:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	CALLBACK_OVF();
 170:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <CALLBACK_OVF>
 174:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <CALLBACK_OVF+0x1>
 178:	09 95       	icall
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <TOIE_Callback>:

extern uint8_t u8_TOVNumber;

void TOIE_Callback()
{
	PORTA = ~PORTA;
 19c:	8b b3       	in	r24, 0x1b	; 27
 19e:	80 95       	com	r24
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret

000001a4 <main>:
}

int main(void)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <main+0x6>
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <main+0x8>
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	8a bb       	out	0x1a, r24	; 26
	sei();
 1b4:	78 94       	sei
	TIMER0_CALLBACK_CompareMatch_INTERRUPT(TOIE_Callback);
 1b6:	8e ec       	ldi	r24, 0xCE	; 206
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 76 00 	call	0xec	; 0xec <TIMER0_CALLBACK_CompareMatch_INTERRUPT>
	STIMER0_CONFIG config = {CTC, OCIE_ENABLE, TOIE_DISABLE, PRESCALING_CLK8};
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	8a 83       	std	Y+2, r24	; 0x02
 1c6:	1b 82       	std	Y+3, r1	; 0x03
 1c8:	8c 83       	std	Y+4, r24	; 0x04
	TIMER0_SetCompareValue(0xF0);
 1ca:	80 ef       	ldi	r24, 0xF0	; 240
 1cc:	0e 94 73 00 	call	0xe6	; 0xe6 <TIMER0_SetCompareValue>
	TIMER0_Init(&config);
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	0e 94 3e 00 	call	0x7c	; 0x7c <TIMER0_Init>
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <main+0x34>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
