
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  0000090d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f5  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001767  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_1>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_2>
   c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	// Enable Global Interrupts
	sei();
  6c:	78 94       	sei
	// INT0 At any logical Change
	MCUCR |= (1<<0);
  6e:	85 b7       	in	r24, 0x35	; 53
  70:	81 60       	ori	r24, 0x01	; 1
  72:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<1);
  74:	85 b7       	in	r24, 0x35	; 53
  76:	8d 7f       	andi	r24, 0xFD	; 253
  78:	85 bf       	out	0x35, r24	; 53
	// INT1 At Rising Edge
	MCUCR |= (1<<4);
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	80 61       	ori	r24, 0x10	; 16
  7e:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<3);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	88 60       	ori	r24, 0x08	; 8
  84:	85 bf       	out	0x35, r24	; 53
	// INT2 Ar Falling Edge
	MCUCR &= ~(1<<6);
  86:	85 b7       	in	r24, 0x35	; 53
  88:	8f 7b       	andi	r24, 0xBF	; 191
  8a:	85 bf       	out	0x35, r24	; 53
	
	// Enable 3 Interrupts to work
	GICR |= (1<<5);
  8c:	8b b7       	in	r24, 0x3b	; 59
  8e:	80 62       	ori	r24, 0x20	; 32
  90:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1<<6);
  92:	8b b7       	in	r24, 0x3b	; 59
  94:	80 64       	ori	r24, 0x40	; 64
  96:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1<<7);
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8b bf       	out	0x3b, r24	; 59

	DDRD |= (1<<5);
  9e:	81 b3       	in	r24, 0x11	; 17
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1<<6);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1<<7);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	81 bb       	out	0x11, r24	; 17
    while (1) 
    {
		PORTD &= ~ (1<<5);
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	8f 7d       	andi	r24, 0xDF	; 223
  b4:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~ (1<<6);
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	8f 7b       	andi	r24, 0xBF	; 191
  ba:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~ (1<<7);
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	8f 77       	andi	r24, 0x7F	; 127
  c0:	82 bb       	out	0x12, r24	; 18
  c2:	f6 cf       	rjmp	.-20     	; 0xb0 <main+0x44>

000000c4 <__vector_1>:
    }
}

ISR(INT0_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	PORTD |= (1<<5);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f e3       	ldi	r18, 0x3F	; 63
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <__vector_1+0x1c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <__vector_1+0x26>
  ea:	00 00       	nop
	_delay_ms(1000);
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_2>:

ISR(INT1_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	PORTD |= (1<<6);
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	82 bb       	out	0x12, r24	; 18
 112:	2f e3       	ldi	r18, 0x3F	; 63
 114:	8d e0       	ldi	r24, 0x0D	; 13
 116:	93 e0       	ldi	r25, 0x03	; 3
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <__vector_2+0x1c>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__vector_2+0x26>
 122:	00 00       	nop
	_delay_ms(1000);
}
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_3>:

ISR(INT2_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	PORTD |= (1<<7);
 144:	82 b3       	in	r24, 0x12	; 18
 146:	80 68       	ori	r24, 0x80	; 128
 148:	82 bb       	out	0x12, r24	; 18
 14a:	2f e3       	ldi	r18, 0x3F	; 63
 14c:	8d e0       	ldi	r24, 0x0D	; 13
 14e:	93 e0       	ldi	r25, 0x03	; 3
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <__vector_3+0x1c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <__vector_3+0x26>
 15a:	00 00       	nop
	_delay_ms(1000);
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
