
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fc4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080010f4  080010f4  000110f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001114  08001114  0001111c  2**0
                  CONTENTS
  4 .ARM          00000000  08001114  08001114  0001111c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001114  0800111c  0001111c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001114  08001114  00011114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001118  08001118  00011118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001111c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000000  0800111c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800111c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001111c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027c9  00000000  00000000  00011145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bf4  00000000  00000000  0001390e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001132  00000000  00000000  00014502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b8  00000000  00000000  00015638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000230  00000000  00000000  000158f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000323e  00000000  00000000  00015b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004265  00000000  00000000  00018d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c04a  00000000  00000000  0001cfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002900d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008d0  00000000  00000000  00029060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080010dc 	.word	0x080010dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080010dc 	.word	0x080010dc

08000170 <clock_init>:
//#define MCU_Act_As_Master
#define MCU_Act_As_Slave


void clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// GPIOA clock enable
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	// GPIOB clock enable
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

	// AFIO clock enable
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <main>:
//#endif
//}


int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0
	clock_init();
 80001aa:	f7ff ffe1 	bl	8000170 <clock_init>
	//	SPI1_CFG.P_IRQ_CallBack = Mahmoud_SPI1_IRQ_Callback;
	//#endif
	//	MCAL_SPI_Init(SPI1, &SPI1_CFG);
	//	MCAL_SPI_GPIO_Set_Pins(SPI1);

	unsigned char ch1[] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7};
 80001ae:	4a1e      	ldr	r2, [pc, #120]	; (8000228 <main+0x84>)
 80001b0:	f107 0308 	add.w	r3, r7, #8
 80001b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001b8:	6018      	str	r0, [r3, #0]
 80001ba:	3304      	adds	r3, #4
 80001bc:	8019      	strh	r1, [r3, #0]
 80001be:	3302      	adds	r3, #2
 80001c0:	0c0a      	lsrs	r2, r1, #16
 80001c2:	701a      	strb	r2, [r3, #0]
	unsigned char ch2[7] = {0};
 80001c4:	2300      	movs	r3, #0
 80001c6:	603b      	str	r3, [r7, #0]
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2100      	movs	r1, #0
 80001cc:	460a      	mov	r2, r1
 80001ce:	801a      	strh	r2, [r3, #0]
 80001d0:	460a      	mov	r2, r1
 80001d2:	709a      	strb	r2, [r3, #2]

	// Test Case 1
	EEPROM_Init();
 80001d4:	f000 f854 	bl	8000280 <EEPROM_Init>
	EEPROM_Write_NBytes(0xAF, ch1, 7);
 80001d8:	f107 0308 	add.w	r3, r7, #8
 80001dc:	2207      	movs	r2, #7
 80001de:	4619      	mov	r1, r3
 80001e0:	20af      	movs	r0, #175	; 0xaf
 80001e2:	f000 f86d 	bl	80002c0 <EEPROM_Write_NBytes>
	EEPROM_read_Byte(0xAF, ch2, 7);
 80001e6:	463b      	mov	r3, r7
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	2207      	movs	r2, #7
 80001ec:	4619      	mov	r1, r3
 80001ee:	20af      	movs	r0, #175	; 0xaf
 80001f0:	f000 f8d0 	bl	8000394 <EEPROM_read_Byte>


	// Test Case 2
	ch1[0] = 0xA;
 80001f4:	230a      	movs	r3, #10
 80001f6:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 80001f8:	230b      	movs	r3, #11
 80001fa:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 80001fc:	230c      	movs	r3, #12
 80001fe:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000200:	230d      	movs	r3, #13
 8000202:	72fb      	strb	r3, [r7, #11]

	EEPROM_Write_NBytes(0xFFF, ch1, 4);
 8000204:	f107 0308 	add.w	r3, r7, #8
 8000208:	2204      	movs	r2, #4
 800020a:	4619      	mov	r1, r3
 800020c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000210:	f000 f856 	bl	80002c0 <EEPROM_Write_NBytes>
	EEPROM_read_Byte(0xFFF, ch2, 4);
 8000214:	463b      	mov	r3, r7
 8000216:	b2db      	uxtb	r3, r3
 8000218:	2204      	movs	r2, #4
 800021a:	4619      	mov	r1, r3
 800021c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000220:	f000 f8b8 	bl	8000394 <EEPROM_read_Byte>

	/* Super Loop */
	while(1)
 8000224:	e7fe      	b.n	8000224 <main+0x80>
 8000226:	bf00      	nop
 8000228:	080010f4 	.word	0x080010f4

0800022c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800022e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000230:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <LoopForever+0x6>)
  ldr r1, =_edata
 8000236:	490d      	ldr	r1, [pc, #52]	; (800026c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000238:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <LoopForever+0xe>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800023c:	e002      	b.n	8000244 <LoopCopyDataInit>

0800023e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000242:	3304      	adds	r3, #4

08000244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000248:	d3f9      	bcc.n	800023e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024a:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800024c:	4c0a      	ldr	r4, [pc, #40]	; (8000278 <LoopForever+0x16>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000250:	e001      	b.n	8000256 <LoopFillZerobss>

08000252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000254:	3204      	adds	r2, #4

08000256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000258:	d3fb      	bcc.n	8000252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025a:	f000 ff1b 	bl	8001094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025e:	f7ff ffa1 	bl	80001a4 <main>

08000262 <LoopForever>:

LoopForever:
    b LoopForever
 8000262:	e7fe      	b.n	8000262 <LoopForever>
  ldr   r0, =_estack
 8000264:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800026c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000270:	0800111c 	.word	0x0800111c
  ldr r2, =_sbss
 8000274:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000278:	200000b4 	.word	0x200000b4

0800027c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800027c:	e7fe      	b.n	800027c <ADC1_2_IRQHandler>
	...

08000280 <EEPROM_Init>:

#include "I2C_Slave_EEPROM.h"


void EEPROM_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0
	/* I2C Init */
	I2C_Config_t I2C1Cfg;

	I2C1Cfg.G_CallAddress_Detection = General_CallAddress_Enable;
 8000286:	2340      	movs	r3, #64	; 0x40
 8000288:	61fb      	str	r3, [r7, #28]
	I2C1Cfg.I2C_ACK_Control = I2C_ACK_Enable;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	61bb      	str	r3, [r7, #24]
	I2C1Cfg.I2C_ClockSpeed = I2C_ClockSpeed_SM_100K;
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <EEPROM_Init+0x38>)
 8000292:	607b      	str	r3, [r7, #4]
	I2C1Cfg.Bus_Mode = Bus_Mode_I2C;
 8000294:	2300      	movs	r3, #0
 8000296:	603b      	str	r3, [r7, #0]
	I2C1Cfg.P_IRQ_CallBack = NULL;
 8000298:	2300      	movs	r3, #0
 800029a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C1Cfg.I2C_Clock_Stretch = I2C_Clock_Stretch_Enabled;
 800029c:	2300      	movs	r3, #0
 800029e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 80002a0:	4806      	ldr	r0, [pc, #24]	; (80002bc <EEPROM_Init+0x3c>)
 80002a2:	f000 fc1d 	bl	8000ae0 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1Cfg);
 80002a6:	463b      	mov	r3, r7
 80002a8:	4619      	mov	r1, r3
 80002aa:	4804      	ldr	r0, [pc, #16]	; (80002bc <EEPROM_Init+0x3c>)
 80002ac:	f000 fafc 	bl	80008a8 <MCAL_I2C_Init>
}
 80002b0:	bf00      	nop
 80002b2:	3728      	adds	r7, #40	; 0x28
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	000186a0 	.word	0x000186a0
 80002bc:	40005400 	.word	0x40005400

080002c0 <EEPROM_Write_NBytes>:
unsigned char EEPROM_Write_NBytes(unsigned int Memory_Address, unsigned char* bytes, uint8_t DataLength)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b0c8      	sub	sp, #288	; 0x120
 80002c4:	af02      	add	r7, sp, #8
 80002c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002ce:	6018      	str	r0, [r3, #0]
 80002d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80002d8:	6019      	str	r1, [r3, #0]
 80002da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002de:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80002e2:	701a      	strb	r2, [r3, #0]

	uint8_t i =0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_Address >> 8) ; // Upper Byte Memory Address
 80002ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000300:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_Address) 	   ; // Lower Byte Memory Address
 8000302:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000306:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	b2da      	uxtb	r2, r3
 800030e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000316:	705a      	strb	r2, [r3, #1]

	for(i = 2; i < (DataLength+2) ; i++)
 8000318:	2302      	movs	r3, #2
 800031a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800031e:	e015      	b.n	800034c <EEPROM_Write_NBytes+0x8c>
	{ buffer[i] = bytes[i-2]; }
 8000320:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000324:	3b02      	subs	r3, #2
 8000326:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800032a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800032e:	6812      	ldr	r2, [r2, #0]
 8000330:	441a      	add	r2, r3
 8000332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000336:	7811      	ldrb	r1, [r2, #0]
 8000338:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800033c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000340:	54d1      	strb	r1, [r2, r3]
	for(i = 2; i < (DataLength+2) ; i++)
 8000342:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000346:	3301      	adds	r3, #1
 8000348:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800034c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000350:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	1c5a      	adds	r2, r3, #1
 8000358:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800035c:	429a      	cmp	r2, r3
 800035e:	dadf      	bge.n	8000320 <EEPROM_Write_NBytes+0x60>

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, (DataLength+2), with_stop, start);
 8000360:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000364:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	3302      	adds	r3, #2
 800036c:	4619      	mov	r1, r3
 800036e:	f107 0214 	add.w	r2, r7, #20
 8000372:	2300      	movs	r3, #0
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	2300      	movs	r3, #0
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	460b      	mov	r3, r1
 800037c:	212a      	movs	r1, #42	; 0x2a
 800037e:	4804      	ldr	r0, [pc, #16]	; (8000390 <EEPROM_Write_NBytes+0xd0>)
 8000380:	f000 fbf8 	bl	8000b74 <MCAL_I2C_Master_TX>

	return 0;
 8000384:	2300      	movs	r3, #0
}
 8000386:	4618      	mov	r0, r3
 8000388:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40005400 	.word	0x40005400

08000394 <EEPROM_read_Byte>:
unsigned char EEPROM_read_Byte(unsigned int address, uint8_t dataOut, uint8_t DataLength)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af02      	add	r7, sp, #8
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	70fb      	strb	r3, [r7, #3]
 80003a0:	4613      	mov	r3, r2
 80003a2:	70bb      	strb	r3, [r7, #2]

	unsigned char buffer[2];
	buffer[0] = (uint8_t)(address >> 8) ; // Upper Byte Memory Address
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	0a1b      	lsrs	r3, r3, #8
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	733b      	strb	r3, [r7, #12]
	buffer[1] = (uint8_t)(address) 	   ; // Lower Byte Memory Address
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	737b      	strb	r3, [r7, #13]

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, &buffer, 2, with_stop, start); // write address only
 80003b2:	f107 020c 	add.w	r2, r7, #12
 80003b6:	2300      	movs	r3, #0
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	2300      	movs	r3, #0
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	2302      	movs	r3, #2
 80003c0:	212a      	movs	r1, #42	; 0x2a
 80003c2:	480a      	ldr	r0, [pc, #40]	; (80003ec <EEPROM_read_Byte+0x58>)
 80003c4:	f000 fbd6 	bl	8000b74 <MCAL_I2C_Master_TX>


	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_Address, dataOut, DataLength, with_stop, repeated_Start); // read address
 80003c8:	78fb      	ldrb	r3, [r7, #3]
 80003ca:	4619      	mov	r1, r3
 80003cc:	78bb      	ldrb	r3, [r7, #2]
 80003ce:	2201      	movs	r2, #1
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	9200      	str	r2, [sp, #0]
 80003d6:	460a      	mov	r2, r1
 80003d8:	212a      	movs	r1, #42	; 0x2a
 80003da:	4804      	ldr	r0, [pc, #16]	; (80003ec <EEPROM_read_Byte+0x58>)
 80003dc:	f000 fc1e 	bl	8000c1c <MCAL_I2C_Master_RX>





}
 80003e0:	bf00      	nop
 80003e2:	4618      	mov	r0, r3
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40005400 	.word	0x40005400

080003f0 <EXTI0_IRQHandler>:
////					ISR FUNCTIONS							////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

void EXTI0_IRQHandler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	//	cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<< 0);
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <EXTI0_IRQHandler+0x1c>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <EXTI0_IRQHandler+0x1c>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6153      	str	r3, [r2, #20]
	// Call the CallBack Function
	GP_IRQ_CallBack[0]();
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <EXTI0_IRQHandler+0x20>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4798      	blx	r3
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40010400 	.word	0x40010400
 8000410:	2000001c 	.word	0x2000001c

08000414 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	//	cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<< 1);
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <EXTI1_IRQHandler+0x1c>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <EXTI1_IRQHandler+0x1c>)
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	6153      	str	r3, [r2, #20]
	// Call the CallBack Function
	GP_IRQ_CallBack[1]();
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <EXTI1_IRQHandler+0x20>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	4798      	blx	r3
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010400 	.word	0x40010400
 8000434:	2000001c 	.word	0x2000001c

08000438 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	//	cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<< 2);
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <EXTI2_IRQHandler+0x1c>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <EXTI2_IRQHandler+0x1c>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6153      	str	r3, [r2, #20]
	// Call the CallBack Function
	GP_IRQ_CallBack[2]();
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <EXTI2_IRQHandler+0x20>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	4798      	blx	r3
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40010400 	.word	0x40010400
 8000458:	2000001c 	.word	0x2000001c

0800045c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	//	cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<< 3);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <EXTI3_IRQHandler+0x1c>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <EXTI3_IRQHandler+0x1c>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6153      	str	r3, [r2, #20]
	// Call the CallBack Function
	GP_IRQ_CallBack[3]();
 800046c:	4b03      	ldr	r3, [pc, #12]	; (800047c <EXTI3_IRQHandler+0x20>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4798      	blx	r3
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40010400 	.word	0x40010400
 800047c:	2000001c 	.word	0x2000001c

08000480 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	//	cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<< 4);
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <EXTI4_IRQHandler+0x1c>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <EXTI4_IRQHandler+0x1c>)
 800048a:	f043 0310 	orr.w	r3, r3, #16
 800048e:	6153      	str	r3, [r2, #20]
	// Call the CallBack Function
	GP_IRQ_CallBack[4]();
 8000490:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <EXTI4_IRQHandler+0x20>)
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	4798      	blx	r3
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40010400 	.word	0x40010400
 80004a0:	2000001c 	.word	0x2000001c

080004a4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<< 5) { EXTI->PR |= (1<< 5)	;  GP_IRQ_CallBack[5]();}
 80004a8:	4b26      	ldr	r3, [pc, #152]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f003 0320 	and.w	r3, r3, #32
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d008      	beq.n	80004c6 <EXTI9_5_IRQHandler+0x22>
 80004b4:	4b23      	ldr	r3, [pc, #140]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a22      	ldr	r2, [pc, #136]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6153      	str	r3, [r2, #20]
 80004c0:	4b21      	ldr	r3, [pc, #132]	; (8000548 <EXTI9_5_IRQHandler+0xa4>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4798      	blx	r3
	if(EXTI->PR & 1<< 6) { EXTI->PR |= (1<< 6)	;  GP_IRQ_CallBack[6]();}
 80004c6:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d008      	beq.n	80004e4 <EXTI9_5_IRQHandler+0x40>
 80004d2:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a1b      	ldr	r2, [pc, #108]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 80004d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <EXTI9_5_IRQHandler+0xa4>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	4798      	blx	r3
	if(EXTI->PR & 1<< 7) { EXTI->PR |= (1<< 7)	;  GP_IRQ_CallBack[7]();}
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d008      	beq.n	8000502 <EXTI9_5_IRQHandler+0x5e>
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a13      	ldr	r2, [pc, #76]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 80004f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fa:	6153      	str	r3, [r2, #20]
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <EXTI9_5_IRQHandler+0xa4>)
 80004fe:	69db      	ldr	r3, [r3, #28]
 8000500:	4798      	blx	r3
	if(EXTI->PR & 1<< 8) { EXTI->PR |= (1<< 8)	;  GP_IRQ_CallBack[8]();}
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800050a:	2b00      	cmp	r3, #0
 800050c:	d008      	beq.n	8000520 <EXTI9_5_IRQHandler+0x7c>
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a0c      	ldr	r2, [pc, #48]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 8000514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <EXTI9_5_IRQHandler+0xa4>)
 800051c:	6a1b      	ldr	r3, [r3, #32]
 800051e:	4798      	blx	r3
	if(EXTI->PR & 1<< 9) { EXTI->PR |= (1<< 9)	;  GP_IRQ_CallBack[9]();}
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000528:	2b00      	cmp	r3, #0
 800052a:	d008      	beq.n	800053e <EXTI9_5_IRQHandler+0x9a>
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <EXTI9_5_IRQHandler+0xa0>)
 8000532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000536:	6153      	str	r3, [r2, #20]
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <EXTI9_5_IRQHandler+0xa4>)
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	4798      	blx	r3

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40010400 	.word	0x40010400
 8000548:	2000001c 	.word	0x2000001c

0800054c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<< 10) { EXTI->PR |= (1<< 10)	;  GP_IRQ_CallBack[10]();}
 8000550:	4b2d      	ldr	r3, [pc, #180]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000558:	2b00      	cmp	r3, #0
 800055a:	d008      	beq.n	800056e <EXTI15_10_IRQHandler+0x22>
 800055c:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 8000562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000566:	6153      	str	r3, [r2, #20]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <EXTI15_10_IRQHandler+0xc0>)
 800056a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800056c:	4798      	blx	r3
	if(EXTI->PR & 1<< 11) { EXTI->PR |= (1<< 11)	;  GP_IRQ_CallBack[11]();}
 800056e:	4b26      	ldr	r3, [pc, #152]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000576:	2b00      	cmp	r3, #0
 8000578:	d008      	beq.n	800058c <EXTI15_10_IRQHandler+0x40>
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a22      	ldr	r2, [pc, #136]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 8000580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <EXTI15_10_IRQHandler+0xc0>)
 8000588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058a:	4798      	blx	r3
	if(EXTI->PR & 1<< 12) { EXTI->PR |= (1<< 12)	;  GP_IRQ_CallBack[12]();}
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000594:	2b00      	cmp	r3, #0
 8000596:	d008      	beq.n	80005aa <EXTI15_10_IRQHandler+0x5e>
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	4a1a      	ldr	r2, [pc, #104]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 800059e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005a2:	6153      	str	r3, [r2, #20]
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <EXTI15_10_IRQHandler+0xc0>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	4798      	blx	r3
	if(EXTI->PR & 1<< 13) { EXTI->PR |= (1<< 13)	;  GP_IRQ_CallBack[13]();}
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d008      	beq.n	80005c8 <EXTI15_10_IRQHandler+0x7c>
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 80005bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <EXTI15_10_IRQHandler+0xc0>)
 80005c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c6:	4798      	blx	r3
	if(EXTI->PR & 1<< 14) { EXTI->PR |= (1<< 14)	;  GP_IRQ_CallBack[14]();}
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d008      	beq.n	80005e6 <EXTI15_10_IRQHandler+0x9a>
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6153      	str	r3, [r2, #20]
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <EXTI15_10_IRQHandler+0xc0>)
 80005e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005e4:	4798      	blx	r3
	if(EXTI->PR & 1<< 15) { EXTI->PR |= (1<< 15)	;  GP_IRQ_CallBack[15]();}
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d008      	beq.n	8000604 <EXTI15_10_IRQHandler+0xb8>
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <EXTI15_10_IRQHandler+0xbc>)
 80005f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b03      	ldr	r3, [pc, #12]	; (800060c <EXTI15_10_IRQHandler+0xc0>)
 8000600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000602:	4798      	blx	r3
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40010400 	.word	0x40010400
 800060c:	2000001c 	.word	0x2000001c

08000610 <Get_CRLH_Position>:
#include "Stm32_F103C6_GPIO_Driver.h"

//==================================

uint8_t Get_CRLH_Position(uint32_t PinNumber)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	switch(PinNumber)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800061e:	f000 80bb 	beq.w	8000798 <Get_CRLH_Position+0x188>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000628:	f200 80b8 	bhi.w	800079c <Get_CRLH_Position+0x18c>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000632:	f000 80af 	beq.w	8000794 <Get_CRLH_Position+0x184>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800063c:	f200 80ae 	bhi.w	800079c <Get_CRLH_Position+0x18c>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000646:	f000 80a3 	beq.w	8000790 <Get_CRLH_Position+0x180>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000650:	f200 80a4 	bhi.w	800079c <Get_CRLH_Position+0x18c>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800065a:	f000 8097 	beq.w	800078c <Get_CRLH_Position+0x17c>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000664:	f200 809a 	bhi.w	800079c <Get_CRLH_Position+0x18c>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800066e:	f000 808b 	beq.w	8000788 <Get_CRLH_Position+0x178>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000678:	f200 8090 	bhi.w	800079c <Get_CRLH_Position+0x18c>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000682:	d07f      	beq.n	8000784 <Get_CRLH_Position+0x174>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800068a:	f200 8087 	bhi.w	800079c <Get_CRLH_Position+0x18c>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000694:	d074      	beq.n	8000780 <Get_CRLH_Position+0x170>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800069c:	d87e      	bhi.n	800079c <Get_CRLH_Position+0x18c>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006a4:	d06a      	beq.n	800077c <Get_CRLH_Position+0x16c>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006ac:	d876      	bhi.n	800079c <Get_CRLH_Position+0x18c>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b80      	cmp	r3, #128	; 0x80
 80006b2:	d061      	beq.n	8000778 <Get_CRLH_Position+0x168>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b80      	cmp	r3, #128	; 0x80
 80006b8:	d870      	bhi.n	800079c <Get_CRLH_Position+0x18c>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b20      	cmp	r3, #32
 80006be:	d849      	bhi.n	8000754 <Get_CRLH_Position+0x144>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d06a      	beq.n	800079c <Get_CRLH_Position+0x18c>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	2b1f      	cmp	r3, #31
 80006cc:	d866      	bhi.n	800079c <Get_CRLH_Position+0x18c>
 80006ce:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <Get_CRLH_Position+0xc4>)
 80006d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d4:	0800075d 	.word	0x0800075d
 80006d8:	08000761 	.word	0x08000761
 80006dc:	0800079d 	.word	0x0800079d
 80006e0:	08000765 	.word	0x08000765
 80006e4:	0800079d 	.word	0x0800079d
 80006e8:	0800079d 	.word	0x0800079d
 80006ec:	0800079d 	.word	0x0800079d
 80006f0:	08000769 	.word	0x08000769
 80006f4:	0800079d 	.word	0x0800079d
 80006f8:	0800079d 	.word	0x0800079d
 80006fc:	0800079d 	.word	0x0800079d
 8000700:	0800079d 	.word	0x0800079d
 8000704:	0800079d 	.word	0x0800079d
 8000708:	0800079d 	.word	0x0800079d
 800070c:	0800079d 	.word	0x0800079d
 8000710:	0800076d 	.word	0x0800076d
 8000714:	0800079d 	.word	0x0800079d
 8000718:	0800079d 	.word	0x0800079d
 800071c:	0800079d 	.word	0x0800079d
 8000720:	0800079d 	.word	0x0800079d
 8000724:	0800079d 	.word	0x0800079d
 8000728:	0800079d 	.word	0x0800079d
 800072c:	0800079d 	.word	0x0800079d
 8000730:	0800079d 	.word	0x0800079d
 8000734:	0800079d 	.word	0x0800079d
 8000738:	0800079d 	.word	0x0800079d
 800073c:	0800079d 	.word	0x0800079d
 8000740:	0800079d 	.word	0x0800079d
 8000744:	0800079d 	.word	0x0800079d
 8000748:	0800079d 	.word	0x0800079d
 800074c:	0800079d 	.word	0x0800079d
 8000750:	08000771 	.word	0x08000771
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b40      	cmp	r3, #64	; 0x40
 8000758:	d00c      	beq.n	8000774 <Get_CRLH_Position+0x164>
 800075a:	e01f      	b.n	800079c <Get_CRLH_Position+0x18c>
	{
	case GPIO_PIN_0:
		return 0;
 800075c:	2300      	movs	r3, #0
 800075e:	e01e      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_1:
		return 4;
 8000760:	2304      	movs	r3, #4
 8000762:	e01c      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_2:
		return 8;
 8000764:	2308      	movs	r3, #8
 8000766:	e01a      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_3:
		return 12;
 8000768:	230c      	movs	r3, #12
 800076a:	e018      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_4:
		return 16;
 800076c:	2310      	movs	r3, #16
 800076e:	e016      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_5:
		return 20;
 8000770:	2314      	movs	r3, #20
 8000772:	e014      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_6:
		return 24;
 8000774:	2318      	movs	r3, #24
 8000776:	e012      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_7:
		return 28;
 8000778:	231c      	movs	r3, #28
 800077a:	e010      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_8:
		return 0;
 800077c:	2300      	movs	r3, #0
 800077e:	e00e      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_9:
		return 4;
 8000780:	2304      	movs	r3, #4
 8000782:	e00c      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_10:
		return 8;
 8000784:	2308      	movs	r3, #8
 8000786:	e00a      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_11:
		return 12;
 8000788:	230c      	movs	r3, #12
 800078a:	e008      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_12:
		return 16;
 800078c:	2310      	movs	r3, #16
 800078e:	e006      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_13:
		return 20;
 8000790:	2314      	movs	r3, #20
 8000792:	e004      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_14:
		return 24;
 8000794:	2318      	movs	r3, #24
 8000796:	e002      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_15:
		return 28;
 8000798:	231c      	movs	r3, #28
 800079a:	e000      	b.n	800079e <Get_CRLH_Position+0x18e>
		break;
	}
	return 0;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <MCAL_GPIO_Init>:
 * Note			-Stm32f103c6 MCU has GPIO A,B,C,D,E Modules
 * 				 but LQFP48 has only GPIO A,B and Part of C,D Exported as external pins from the MCU
 */

void MCAL_GPIO_Init(GPIO_Typedef *GPIOx, GPIO_PinConfig* PinConfig)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	volatile uint32_t* ConfigRegister = NULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	2bff      	cmp	r3, #255	; 0xff
 80007c0:	d801      	bhi.n	80007c6 <MCAL_GPIO_Init+0x1e>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	e001      	b.n	80007ca <MCAL_GPIO_Init+0x22>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3304      	adds	r3, #4
 80007ca:	60bb      	str	r3, [r7, #8]

	// Clear CNF1[1:0] MODE1[1:0]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff1d 	bl	8000610 <Get_CRLH_Position>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	230f      	movs	r3, #15
 80007dc:	4093      	lsls	r3, r2
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	401a      	ands	r2, r3
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	601a      	str	r2, [r3, #0]

	// If Pin is Output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_ALT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_ALT_PP || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP  )
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	2b07      	cmp	r3, #7
 80007f0:	d00b      	beq.n	800080a <MCAL_GPIO_Init+0x62>
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	789b      	ldrb	r3, [r3, #2]
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d007      	beq.n	800080a <MCAL_GPIO_Init+0x62>
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	789b      	ldrb	r3, [r3, #2]
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d003      	beq.n	800080a <MCAL_GPIO_Init+0x62>
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	2b04      	cmp	r3, #4
 8000808:	d10e      	bne.n	8000828 <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) &0x0F) ;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	3b04      	subs	r3, #4
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	b25a      	sxtb	r2, r3
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	78db      	ldrb	r3, [r3, #3]
 8000818:	b25b      	sxtb	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b25b      	sxtb	r3, r3
 800081e:	b2db      	uxtb	r3, r3
 8000820:	f003 030f 	and.w	r3, r3, #15
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e02c      	b.n	8000882 <MCAL_GPIO_Init+0xda>

	}
	// If Pin is Input
	else //MODE = 00: Input mode (reset state)
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_ANALOG || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO )
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d003      	beq.n	8000838 <MCAL_GPIO_Init+0x90>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	789b      	ldrb	r3, [r3, #2]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d107      	bne.n	8000848 <MCAL_GPIO_Init+0xa0>
		{
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | 0x0) &0x0F) ;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	789b      	ldrb	r3, [r3, #2]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	b2db      	uxtb	r3, r3
 8000840:	f003 030f 	and.w	r3, r3, #15
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e01c      	b.n	8000882 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_ALT_INPUT)  // Consider it as input floating
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	789b      	ldrb	r3, [r3, #2]
 800084c:	2b08      	cmp	r3, #8
 800084e:	d102      	bne.n	8000856 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0) &0x0F) ;
 8000850:	2304      	movs	r3, #4
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	e015      	b.n	8000882 <MCAL_GPIO_Init+0xda>
		}
		else // PU PD
		{
			//			Table 20. Port bit configuration table

			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) &0x0F) ;
 8000856:	2308      	movs	r3, #8
 8000858:	73fb      	strb	r3, [r7, #15]
			if(PinConfig ->GPIO_MODE == GPIO_MODE_INPUT_PU) // Write 1 on the PxODR register
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	789b      	ldrb	r3, [r3, #2]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d107      	bne.n	8000872 <MCAL_GPIO_Init+0xca>
			{
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	8812      	ldrh	r2, [r2, #0]
 800086a:	431a      	orrs	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	e007      	b.n	8000882 <MCAL_GPIO_Init+0xda>
			}
			else // Write 0 on the PxODR register
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	8812      	ldrh	r2, [r2, #0]
 800087a:	43d2      	mvns	r2, r2
 800087c:	401a      	ands	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CRL Or CRH
	(*ConfigRegister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)  );
 8000882:	7bfc      	ldrb	r4, [r7, #15]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fec1 	bl	8000610 <Get_CRLH_Position>
 800088e:	4603      	mov	r3, r0
 8000890:	fa04 f203 	lsl.w	r2, r4, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	431a      	orrs	r2, r3
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	601a      	str	r2, [r3, #0]


}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd90      	pop	{r4, r7, pc}
	...

080008a8 <MCAL_I2C_Init>:
 * @param [in] 	-I2C_config_t all I2C configuration
 * @retval		-None
 * Note			-only 7bit Mode Supported
 */
void MCAL_I2C_Init(I2C_Typedef* I2Cx, I2C_Config_t* I2C_Config)
{
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	uint16_t tmpreg=0, freqRange = 0, result = 0 ;
 80008b2:	2300      	movs	r3, #0
 80008b4:	82fb      	strh	r3, [r7, #22]
 80008b6:	2300      	movs	r3, #0
 80008b8:	82bb      	strh	r3, [r7, #20]
 80008ba:	2300      	movs	r3, #0
 80008bc:	827b      	strh	r3, [r7, #18]
	uint32_t pclk1 = 8000000 ;
 80008be:	4b7f      	ldr	r3, [pc, #508]	; (8000abc <MCAL_I2C_Init+0x214>)
 80008c0:	60fb      	str	r3, [r7, #12]
	// Enable RCC Clock
	if(I2Cx == I2C1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a7e      	ldr	r2, [pc, #504]	; (8000ac0 <MCAL_I2C_Init+0x218>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d112      	bne.n	80008f0 <MCAL_I2C_Init+0x48>
	{
		Global_I2C_Config[I2C1_index] = *I2C_Config ;
 80008ca:	4a7e      	ldr	r2, [pc, #504]	; (8000ac4 <MCAL_I2C_Init+0x21c>)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	4614      	mov	r4, r2
 80008d0:	461d      	mov	r5, r3
 80008d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008de:	e884 0003 	stmia.w	r4, {r0, r1}
		RCC_I2C1_CLK_EN() ;
 80008e2:	4b79      	ldr	r3, [pc, #484]	; (8000ac8 <MCAL_I2C_Init+0x220>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a78      	ldr	r2, [pc, #480]	; (8000ac8 <MCAL_I2C_Init+0x220>)
 80008e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	e012      	b.n	8000916 <MCAL_I2C_Init+0x6e>
	}
	else
	{
		Global_I2C_Config[I2C2_index] = *I2C_Config ;
 80008f0:	4b74      	ldr	r3, [pc, #464]	; (8000ac4 <MCAL_I2C_Init+0x21c>)
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80008f8:	4615      	mov	r5, r2
 80008fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000902:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000906:	e884 0003 	stmia.w	r4, {r0, r1}
		RCC_I2C2_CLK_EN() ;
 800090a:	4b6f      	ldr	r3, [pc, #444]	; (8000ac8 <MCAL_I2C_Init+0x220>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a6e      	ldr	r2, [pc, #440]	; (8000ac8 <MCAL_I2C_Init+0x220>)
 8000910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000914:	61d3      	str	r3, [r2, #28]
	}

	// Check Bus Mode
	if(I2C_Config ->Bus_Mode == Bus_Mode_I2C)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	f040 80ca 	bne.w	8000ab4 <MCAL_I2C_Init+0x20c>
	{
		/**	Init Timing **/
		tmpreg = I2Cx->CR2 ;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	82fb      	strh	r3, [r7, #22]
		// Clear Frequency [0:5] Bits
		tmpreg &= ~(I2C_CR2_FREQ);
 8000926:	8afb      	ldrh	r3, [r7, #22]
 8000928:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800092c:	82fb      	strh	r3, [r7, #22]
		// Get Pclk1 frequency
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 800092e:	f000 fb23 	bl	8000f78 <MCAL_RCC_GetPCLK1Freq>
 8000932:	60f8      	str	r0, [r7, #12]
		//set frequency bits depending on pclk1 value
		freqRange = (uint16_t)(pclk1 / 1000000 );
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4a65      	ldr	r2, [pc, #404]	; (8000acc <MCAL_I2C_Init+0x224>)
 8000938:	fba2 2303 	umull	r2, r3, r2, r3
 800093c:	0c9b      	lsrs	r3, r3, #18
 800093e:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqRange;
 8000940:	8afa      	ldrh	r2, [r7, #22]
 8000942:	8abb      	ldrh	r3, [r7, #20]
 8000944:	4313      	orrs	r3, r2
 8000946:	82fb      	strh	r3, [r7, #22]
		// Set I2C_CR2 reg value
		I2Cx->CR2 = tmpreg ;
 8000948:	8afa      	ldrh	r2, [r7, #22]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	605a      	str	r2, [r3, #4]

		// Configue clock control registers (I2C_CCR)
		// Disable I2C
		I2Cx->CR2 &= ~(I2C_CR1_PE);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f023 0201 	bic.w	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
		tmpreg = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	82fb      	strh	r3, [r7, #22]

		if(I2C_Config->I2C_ClockSpeed == I2C_ClockSpeed_SM_50K || I2C_Config->I2C_ClockSpeed == I2C_ClockSpeed_SM_100K)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000966:	d004      	beq.n	8000972 <MCAL_I2C_Init+0xca>
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	4a58      	ldr	r2, [pc, #352]	; (8000ad0 <MCAL_I2C_Init+0x228>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d115      	bne.n	800099e <MCAL_I2C_Init+0xf6>
		{
			result = (uint16_t)( pclk1 / (I2C_Config->I2C_ClockSpeed << 1)) ;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	827b      	strh	r3, [r7, #18]
			tmpreg = I2Cx->CCR ;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	82fb      	strh	r3, [r7, #22]

			tmpreg |= result ;
 8000986:	8afa      	ldrh	r2, [r7, #22]
 8000988:	8a7b      	ldrh	r3, [r7, #18]
 800098a:	4313      	orrs	r3, r2
 800098c:	82fb      	strh	r3, [r7, #22]

			I2Cx->CCR = tmpreg ;
 800098e:	8afa      	ldrh	r2, [r7, #22]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	61da      	str	r2, [r3, #28]

			I2Cx->TRISE = ( freqRange+ 1) ;
 8000994:	8abb      	ldrh	r3, [r7, #20]
 8000996:	3301      	adds	r3, #1
 8000998:	461a      	mov	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	621a      	str	r2, [r3, #32]
		}
		else
		{
			//			Fast Mode Not Supported
		}
		tmpreg = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	82fb      	strh	r3, [r7, #22]
		tmpreg = I2Cx->CR1 ;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	82fb      	strh	r3, [r7, #22]
		tmpreg |= (uint16_t)(I2C_Config->I2C_ACK_Control | I2C_Config->G_CallAddress_Detection | I2C_Config->I2C_Clock_Stretch | I2C_Config->Bus_Mode) ;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	4313      	orrs	r3, r2
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	8afb      	ldrh	r3, [r7, #22]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR1 |= tmpreg ;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	431a      	orrs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]

		/*------------------------------- I2C_OAR1 & OAR2 Configurations -------------------------------*/
		tmpreg = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	82fb      	strh	r3, [r7, #22]
		if(I2C_Config->I2C_Slave_Device_Address.Enable_Dual_Address == 1)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	8a1b      	ldrh	r3, [r3, #16]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d10d      	bne.n	8000a06 <MCAL_I2C_Init+0x15e>
		{
			tmpreg = I2C_OAR2_ENDUAL;
 80009ea:	2301      	movs	r3, #1
 80009ec:	82fb      	strh	r3, [r7, #22]
			tmpreg |= I2C_Config->I2C_Slave_Device_Address.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	8a9b      	ldrh	r3, [r3, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg;
 8000a00:	8afa      	ldrh	r2, [r7, #22]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60da      	str	r2, [r3, #12]
		}
		tmpreg = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	82fb      	strh	r3, [r7, #22]
		tmpreg |= I2C_Config->I2C_Slave_Device_Address.Primary_Slave_Address << 1;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	8a5b      	ldrh	r3, [r3, #18]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	82fb      	strh	r3, [r7, #22]
		tmpreg |= I2C_Config->I2C_Addressing_Mode;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	8afb      	ldrh	r3, [r7, #22]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	82fb      	strh	r3, [r7, #22]

		I2Cx->OAR1 = tmpreg;
 8000a28:	8afa      	ldrh	r2, [r7, #22]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	609a      	str	r2, [r3, #8]

		//Interrupt Mode in Slave mode
		//Check if the pointer != NULL if yes Enable interrupts
		if(I2C_Config->P_IRQ_CallBack != NULL)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d032      	beq.n	8000a9c <MCAL_I2C_Init+0x1f4>
		{
			//Enable IRQ
			I2Cx->CR2 |= I2C_CR2_ITBUFEN;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	605a      	str	r2, [r3, #4]
			I2Cx->CR2 |= I2C_CR2_ITERREN;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	605a      	str	r2, [r3, #4]
			I2Cx->CR2 |= I2C_CR2_ITEVTEN;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	605a      	str	r2, [r3, #4]
			if(I2Cx == I2C1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <MCAL_I2C_Init+0x218>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d10c      	bne.n	8000a7c <MCAL_I2C_Init+0x1d4>
			{
				NVIC_IRQ31_I2C1_EV_Enable;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MCAL_I2C_Init+0x22c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <MCAL_I2C_Init+0x22c>)
 8000a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6c:	6013      	str	r3, [r2, #0]
				NVIC_IRQ32_I2C1_ER_Enable;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MCAL_I2C_Init+0x230>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <MCAL_I2C_Init+0x230>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6013      	str	r3, [r2, #0]
 8000a7a:	e00f      	b.n	8000a9c <MCAL_I2C_Init+0x1f4>
			}
			else if (I2Cx == I2C2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MCAL_I2C_Init+0x234>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d10b      	bne.n	8000a9c <MCAL_I2C_Init+0x1f4>
			{
				NVIC_IRQ33_I2C2_EV_Enable;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MCAL_I2C_Init+0x230>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <MCAL_I2C_Init+0x230>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	6013      	str	r3, [r2, #0]
				NVIC_IRQ34_I2C2_ER_Enable;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MCAL_I2C_Init+0x230>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <MCAL_I2C_Init+0x230>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6013      	str	r3, [r2, #0]
			}
		}

		I2Cx->SR1 = 0;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]


		// Enable I2C Peripheral
		I2Cx->CR1 |= I2C_CR1_PE;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f043 0201 	orr.w	r2, r3, #1
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	601a      	str	r2, [r3, #0]
	else
	{
		//SMBus Not Supported
	}

}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bdb0      	pop	{r4, r5, r7, pc}
 8000abc:	007a1200 	.word	0x007a1200
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	20000058 	.word	0x20000058
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	431bde83 	.word	0x431bde83
 8000ad0:	000186a0 	.word	0x000186a0
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000e104 	.word	0xe000e104
 8000adc:	40005800 	.word	0x40005800

08000ae0 <MCAL_I2C_GPIO_Set_Pins>:
		NVIC_IRQ34_I2C2_ER_Disable;
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_Typedef* I2Cx)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	//	I2Cx_SCL I2C clock Alternate function open drain
	//	I2Cx_SDA I2C Data I/O Alternate function open drain
	GPIO_PinConfig pinCfg;
	if(I2Cx == I2C1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d118      	bne.n	8000b22 <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		//	I2C1
		//	PB6 -> SCL
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_OD;
 8000af0:	2307      	movs	r3, #7
 8000af2:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
		pinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000af8:	2340      	movs	r3, #64	; 0x40
 8000afa:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	481a      	ldr	r0, [pc, #104]	; (8000b6c <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000b04:	f7ff fe50 	bl	80007a8 <MCAL_GPIO_Init>

		//  PB7 -> SDA
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_OD;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
		pinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4814      	ldr	r0, [pc, #80]	; (8000b6c <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000b1c:	f7ff fe44 	bl	80007a8 <MCAL_GPIO_Init>
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_OD;
		pinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
		MCAL_GPIO_Init(GPIOB, &pinCfg);
	}
}
 8000b20:	e01d      	b.n	8000b5e <MCAL_I2C_GPIO_Set_Pins+0x7e>
	else if (I2Cx == I2C2)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MCAL_I2C_GPIO_Set_Pins+0x90>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d119      	bne.n	8000b5e <MCAL_I2C_GPIO_Set_Pins+0x7e>
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_OD;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b36:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000b40:	f7ff fe32 	bl	80007a8 <MCAL_GPIO_Init>
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_OD;
 8000b44:	2307      	movs	r3, #7
 8000b46:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000b4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b50:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000b5a:	f7ff fe25 	bl	80007a8 <MCAL_GPIO_Init>
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40005800 	.word	0x40005800

08000b74 <MCAL_I2C_Master_TX>:



void MCAL_I2C_Master_TX(I2C_Typedef *I2Cx , uint16_t Address , uint8_t* PTXBuffer , uint32_t DataLen , Stop_State Stop , Repeated_Start Start)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	460b      	mov	r3, r1
 8000b82:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

	//1- Generate Start Condition
	I2C_GenerateStart(I2Cx, enable, start);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f000 f97b 	bl	8000e88 <I2C_GenerateStart>

	//2- wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000b92:	bf00      	nop
 8000b94:	2101      	movs	r1, #1
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f000 f8b2 	bl	8000d00 <I2C_GetFlagStatus>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f8      	beq.n	8000b94 <MCAL_I2C_Master_TX+0x20>

	//3- Send Address
	I2C_SendAddress(I2Cx, Address, I2C_Direction_Transmit);
 8000ba2:	897b      	ldrh	r3, [r7, #10]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f94e 	bl	8000e4a <I2C_SendAddress>

	//4- wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000bae:	bf00      	nop
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f000 f8a4 	bl	8000d00 <I2C_GetFlagStatus>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f8      	beq.n	8000bb0 <MCAL_I2C_Master_TX+0x3c>

	//5- check /* TRA, BUSY, MSL TXE */ Flags
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000bbe:	bf00      	nop
 8000bc0:	4915      	ldr	r1, [pc, #84]	; (8000c18 <MCAL_I2C_Master_TX+0xa4>)
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f000 f89c 	bl	8000d00 <I2C_GetFlagStatus>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f8      	beq.n	8000bc0 <MCAL_I2C_Master_TX+0x4c>

	//6- Send data
	for( i = 0; i < DataLen; i++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e011      	b.n	8000bf8 <MCAL_I2C_Master_TX+0x84>
	{
		// Write in the DR the data to be sent
		I2Cx->DR = PTXBuffer[i];
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	611a      	str	r2, [r3, #16]
		//6.1- wait for EV8
		//EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		while( !I2C_GetFlagStatus(I2Cx, EV8) );
 8000be2:	bf00      	nop
 8000be4:	2103      	movs	r1, #3
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f000 f88a 	bl	8000d00 <I2C_GetFlagStatus>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f8      	beq.n	8000be4 <MCAL_I2C_Master_TX+0x70>
	for( i = 0; i < DataLen; i++)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8e9      	bhi.n	8000bd4 <MCAL_I2C_Master_TX+0x60>
	}

	//7- Generate Stop Condition
	if(Stop == with_stop)
 8000c00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d103      	bne.n	8000c10 <MCAL_I2C_Master_TX+0x9c>
	{
		I2C_GenerateSTOP(I2Cx, eenable);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f000 f963 	bl	8000ed6 <I2C_GenerateSTOP>
	}
}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	00070080 	.word	0x00070080

08000c1c <MCAL_I2C_Master_RX>:



void MCAL_I2C_Master_RX(I2C_Typedef *I2Cx , uint16_t Address , uint8_t* PRXBuffer , uint32_t DataLen , Stop_State Stop , Repeated_Start Start)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	817b      	strh	r3, [r7, #10]
	uint8_t index =    (I2Cx == I2C1) ? I2C1_index : I2C2_index ;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4a32      	ldr	r2, [pc, #200]	; (8000cf8 <MCAL_I2C_Master_RX+0xdc>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	bf14      	ite	ne
 8000c34:	2301      	movne	r3, #1
 8000c36:	2300      	moveq	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	74fb      	strb	r3, [r7, #19]
	int i = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

	//1- Generate Start Condition
	I2C_GenerateStart(I2Cx, enable, start);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2101      	movs	r1, #1
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f000 f91f 	bl	8000e88 <I2C_GenerateStart>

	//2- wait for EV5
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000c4a:	bf00      	nop
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f000 f856 	bl	8000d00 <I2C_GetFlagStatus>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f8      	beq.n	8000c4c <MCAL_I2C_Master_RX+0x30>

	//3- Send Address
	I2C_SendAddress(I2Cx, Address, I2C_Direction_Recive);
 8000c5a:	897b      	ldrh	r3, [r7, #10]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4619      	mov	r1, r3
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f000 f8f2 	bl	8000e4a <I2C_SendAddress>

	//4- wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000c66:	bf00      	nop
 8000c68:	2102      	movs	r1, #2
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f000 f848 	bl	8000d00 <I2C_GetFlagStatus>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0f8      	beq.n	8000c68 <MCAL_I2C_Master_RX+0x4c>

	//5- Open Acknowledge Configuration
	I2C_AcknowledgeConfig(I2Cx, eenable);
 8000c76:	2101      	movs	r1, #1
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f000 f8cb 	bl	8000e14 <I2C_AcknowledgeConfig>

	//6- Check if datalen exist
	if(DataLen)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d018      	beq.n	8000cb6 <MCAL_I2C_Master_RX+0x9a>
	{
		for(i = DataLen; i > 1; i--)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e012      	b.n	8000cb0 <MCAL_I2C_Master_RX+0x94>
		{
			//5.1- wait for EV7 --> RXNE not Empty
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000c8a:	bf00      	nop
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f000 f836 	bl	8000d00 <I2C_GetFlagStatus>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f8      	beq.n	8000c8c <MCAL_I2C_Master_RX+0x70>
			*PRXBuffer = I2Cx->DR;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	701a      	strb	r2, [r3, #0]
			PRXBuffer++;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
		for(i = DataLen; i > 1; i--)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	dce9      	bgt.n	8000c8a <MCAL_I2C_Master_RX+0x6e>
		}
	}
	//7- Disable the Acknowledge
	I2C_AcknowledgeConfig(I2Cx, ddisable);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f000 f8ab 	bl	8000e14 <I2C_AcknowledgeConfig>

	//8- Generate Stop Condition
	if(Stop == with_stop)
 8000cbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d103      	bne.n	8000cce <MCAL_I2C_Master_RX+0xb2>
	{
		I2C_GenerateSTOP(I2Cx, eenable);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f000 f904 	bl	8000ed6 <I2C_GenerateSTOP>
	}

	//9- activate the Acknowledge
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_ACK_Enable)
 8000cce:	7cfa      	ldrb	r2, [r7, #19]
 8000cd0:	490a      	ldr	r1, [pc, #40]	; (8000cfc <MCAL_I2C_Master_RX+0xe0>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3318      	adds	r3, #24
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce4:	d103      	bne.n	8000cee <MCAL_I2C_Master_RX+0xd2>
	{
		I2C_AcknowledgeConfig(I2Cx, eenable);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f000 f893 	bl	8000e14 <I2C_AcknowledgeConfig>
	}
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	20000058 	.word	0x20000058

08000d00 <I2C_GetFlagStatus>:
 * 								Generic Functions
 * =============================================================================================
 */

flagStatus I2C_GetFlagStatus(I2C_Typedef* I2Cx, status flag)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyread;
	flagStatus bitstatus = reset;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	77fb      	strb	r3, [r7, #31]
	uint32_t flag1= 0, flag2 = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
	uint32_t lastevent = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
	switch(flag)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2b05      	cmp	r3, #5
 8000d1e:	d811      	bhi.n	8000d44 <I2C_GetFlagStatus+0x44>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b05      	cmp	r3, #5
 8000d24:	d86d      	bhi.n	8000e02 <I2C_GetFlagStatus+0x102>
 8000d26:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <I2C_GetFlagStatus+0x2c>)
 8000d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2c:	08000d4f 	.word	0x08000d4f
 8000d30:	08000d67 	.word	0x08000d67
 8000d34:	08000d7f 	.word	0x08000d7f
 8000d38:	08000dd3 	.word	0x08000dd3
 8000d3c:	08000dd3 	.word	0x08000dd3
 8000d40:	08000deb 	.word	0x08000deb
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	4a32      	ldr	r2, [pc, #200]	; (8000e10 <I2C_GetFlagStatus+0x110>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d027      	beq.n	8000d9c <I2C_GetFlagStatus+0x9c>
 8000d4c:	e059      	b.n	8000e02 <I2C_GetFlagStatus+0x102>
	{
	case I2C_Flag_BUSY:
	{
		if( (I2Cx->SR2) & (I2C_SR2_BUSY) )
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <I2C_GetFlagStatus+0x60>
			bitstatus = set;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = reset;
		break;
 8000d5e:	e050      	b.n	8000e02 <I2C_GetFlagStatus+0x102>
			bitstatus = reset;
 8000d60:	2300      	movs	r3, #0
 8000d62:	77fb      	strb	r3, [r7, #31]
		break;
 8000d64:	e04d      	b.n	8000e02 <I2C_GetFlagStatus+0x102>
	{
		//	EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		//	Bit 0 SB: Start bit (Master mode)
		//	0: No Start condition
		//	1: Start condition generated.
		if((I2Cx->SR1) & (I2C_SR1_SB) )
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d002      	beq.n	8000d78 <I2C_GetFlagStatus+0x78>
			bitstatus = set;
 8000d72:	2301      	movs	r3, #1
 8000d74:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = reset;
		break;
 8000d76:	e044      	b.n	8000e02 <I2C_GetFlagStatus+0x102>
			bitstatus = reset;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	77fb      	strb	r3, [r7, #31]
		break;
 8000d7c:	e041      	b.n	8000e02 <I2C_GetFlagStatus+0x102>
		//		0: Address mismatched or not received.
		//		1: Received address matched.
		//		– Set by hardware as soon as the received slave address matched with the OAR registers
		//		content or a general call or a SMBus Device Default Address or SMBus Host or SMBus Alert
		//		is recognized. (when enabled depending on configuration).
		if((I2Cx->SR1) & (I2C_SR1_ADDR) )
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <I2C_GetFlagStatus+0x90>
			bitstatus = set;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	77fb      	strb	r3, [r7, #31]
 8000d8e:	e001      	b.n	8000d94 <I2C_GetFlagStatus+0x94>
		else
			bitstatus = reset;
 8000d90:	2300      	movs	r3, #0
 8000d92:	77fb      	strb	r3, [r7, #31]
		dummyread = I2Cx->SR2;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	60fb      	str	r3, [r7, #12]
		break;
 8000d9a:	e032      	b.n	8000e02 <I2C_GetFlagStatus+0x102>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		flag1 = I2Cx->SR1;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	041b      	lsls	r3, r3, #16
 8000dac:	617b      	str	r3, [r7, #20]
		lastevent = ( (flag1 | flag2)  & (uint32_t)0x00FFFFFF);
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000db8:	613b      	str	r3, [r7, #16]
		if( (lastevent & flag )== flag)
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d102      	bne.n	8000dcc <I2C_GetFlagStatus+0xcc>
			bitstatus = set;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = reset;
		break;
 8000dca:	e01a      	b.n	8000e02 <I2C_GetFlagStatus+0x102>
			bitstatus = reset;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	77fb      	strb	r3, [r7, #31]
		break;
 8000dd0:	e017      	b.n	8000e02 <I2C_GetFlagStatus+0x102>
	}
	case EV8_1:
	case EV8:
	{
		//EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		if( (I2Cx->SR1) & (I2C_SR1_TXE) )
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <I2C_GetFlagStatus+0xe4>
			bitstatus = set;
 8000dde:	2301      	movs	r3, #1
 8000de0:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = reset;
		break;
 8000de2:	e00e      	b.n	8000e02 <I2C_GetFlagStatus+0x102>
			bitstatus = reset;
 8000de4:	2300      	movs	r3, #0
 8000de6:	77fb      	strb	r3, [r7, #31]
		break;
 8000de8:	e00b      	b.n	8000e02 <I2C_GetFlagStatus+0x102>
		//		0: Data register empty
		//		1: Data register not empty
		//		– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//		– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//		RxNE is not set in case of ARLO event.
		if((I2Cx->SR1) & (I2C_SR1_RXNE))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <I2C_GetFlagStatus+0xfc>
			bitstatus = set;
 8000df6:	2301      	movs	r3, #1
 8000df8:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = reset;
		break;
 8000dfa:	e001      	b.n	8000e00 <I2C_GetFlagStatus+0x100>
			bitstatus = reset;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	77fb      	strb	r3, [r7, #31]
		break;
 8000e00:	bf00      	nop
	}

	}


	return bitstatus;
 8000e02:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3724      	adds	r7, #36	; 0x24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	00070080 	.word	0x00070080

08000e14 <I2C_AcknowledgeConfig>:


void I2C_AcknowledgeConfig(I2C_Typedef* I2Cx, EN_DIS NewState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
	//	Bit 10 ACK: Acknowledge enable
	//	This bit is set and cleared by software and cleared by hardware when PE=0.
	//	0: No acknowledge returned
	//	1: Acknowledge returned after a byte is received (matched address or data)
	if(NewState != ddisable)
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d006      	beq.n	8000e34 <I2C_AcknowledgeConfig+0x20>
	{
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000e32:	e005      	b.n	8000e40 <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <I2C_SendAddress>:


void I2C_SendAddress(I2C_Typedef* I2Cx, uint16_t address, I2C_Direction Direction)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	807b      	strh	r3, [r7, #2]
 8000e56:	4613      	mov	r3, r2
 8000e58:	707b      	strb	r3, [r7, #1]
	address = (address << 1);
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmit)
 8000e60:	787b      	ldrb	r3, [r7, #1]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <I2C_SendAddress+0x26>
	{
		/* set the address bit 0 to read */
		address |= 1<<0;
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	807b      	strh	r3, [r7, #2]
 8000e6e:	e003      	b.n	8000e78 <I2C_SendAddress+0x2e>
	}
	else
	{
		/* set the address bit 1 to write */
		address &= ~(1<<0);
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	f023 0301 	bic.w	r3, r3, #1
 8000e76:	807b      	strh	r3, [r7, #2]
	}
	I2Cx->DR = address;
 8000e78:	887a      	ldrh	r2, [r7, #2]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	611a      	str	r2, [r3, #16]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <I2C_GenerateStart>:




void I2C_GenerateStart(I2C_Typedef* I2Cx, FunctionalState NewState, Repeated_Start Start)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
 8000e94:	4613      	mov	r3, r2
 8000e96:	70bb      	strb	r3, [r7, #2]
	if(Start != repeated_Start)
 8000e98:	78bb      	ldrb	r3, [r7, #2]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d007      	beq.n	8000eae <I2C_GenerateStart+0x26>
	{
		// Check if the bus is busy
		while(I2C_GetFlagStatus(I2Cx, I2C_Flag_BUSY) );
 8000e9e:	bf00      	nop
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff2c 	bl	8000d00 <I2C_GetFlagStatus>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f8      	bne.n	8000ea0 <I2C_GenerateStart+0x18>
	}
	if(NewState != disable )
 8000eae:	78fb      	ldrb	r3, [r7, #3]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d006      	beq.n	8000ec2 <I2C_GenerateStart+0x3a>
	{
		//Generate Start Condition
		I2Cx->CR1 |= I2C_CR1_START;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
	else
	{
		//Disable start condition generation
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}
}
 8000ec0:	e005      	b.n	8000ece <I2C_GenerateStart+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	601a      	str	r2, [r3, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <I2C_GenerateSTOP>:



void I2C_GenerateSTOP(I2C_Typedef* I2Cx, EN_DIS NewState)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70fb      	strb	r3, [r7, #3]
	if(NewState != ddisable)
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <I2C_GenerateSTOP+0x20>
	{
		I2Cx->CR1 |= (I2C_CR1_STOP);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]
	{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}


}
 8000ef4:	e005      	b.n	8000f02 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <MCAL_RCC_GetSYS_CLKFreq>:
const uint8_t APBPrescTable[8U] = {0, 0, 0, 0, 1, 2, 3, 4};
const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8};


uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
	switch( (RCC->CFGR >> 2) & 0b11 )
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d00a      	beq.n	8000f34 <MCAL_RCC_GetSYS_CLKFreq+0x28>
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d80a      	bhi.n	8000f38 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d002      	beq.n	8000f30 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000f2a:	e005      	b.n	8000f38 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
	{
	case 0:
		return HSI_RC_Clk;		break;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 8000f2e:	e004      	b.n	8000f3a <MCAL_RCC_GetSYS_CLKFreq+0x2e>
	case 1:
		return HSE_Clock;		break;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 8000f32:	e002      	b.n	8000f3a <MCAL_RCC_GetSYS_CLKFreq+0x2e>
	case 2:
		return 16000000;		break;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 8000f36:	e000      	b.n	8000f3a <MCAL_RCC_GetSYS_CLKFreq+0x2e>
	}
	return 16000000;
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <MCAL_RCC_GetSYS_CLKFreq+0x40>)
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	007a1200 	.word	0x007a1200
 8000f4c:	00f42400 	.word	0x00f42400

08000f50 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetSYS_CLKFreq() 	>> AHBPrescTable[ ( (RCC->CFGR >> 4)& 0xF)]);
 8000f54:	f7ff ffda 	bl	8000f0c <MCAL_RCC_GetSYS_CLKFreq>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 030f 	and.w	r3, r3, #15
 8000f64:	4903      	ldr	r1, [pc, #12]	; (8000f74 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000f66:	5ccb      	ldrb	r3, [r1, r3]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	08001104 	.word	0x08001104

08000f78 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	return(MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8)& 0b111)] );
 8000f7c:	f7ff ffe8 	bl	8000f50 <MCAL_RCC_GetHCLKFreq>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	4903      	ldr	r1, [pc, #12]	; (8000f9c <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000f8e:	5ccb      	ldrb	r3, [r1, r3]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	080010fc 	.word	0x080010fc

08000fa0 <SPI1_IRQHandler>:
/* ================================================================ */
/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ;

	IRQ.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <SPI1_IRQHandler+0x54>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	085b      	lsrs	r3, r3, #1
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	793b      	ldrb	r3, [r7, #4]
 8000fb4:	f362 0300 	bfi	r3, r2, #0, #1
 8000fb8:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <SPI1_IRQHandler+0x54>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	793b      	ldrb	r3, [r7, #4]
 8000fc6:	f362 0341 	bfi	r3, r2, #1, #1
 8000fca:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <SPI1_IRQHandler+0x54>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	793b      	ldrb	r3, [r7, #4]
 8000fda:	f362 0382 	bfi	r3, r2, #2, #1
 8000fde:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(IRQ);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SPI1_IRQHandler+0x58>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	7938      	ldrb	r0, [r7, #4]
 8000fe8:	4798      	blx	r3
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40013000 	.word	0x40013000
 8000ff8:	200000a8 	.word	0x200000a8

08000ffc <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ;

	IRQ.TXE = ((SPI2->SR & (1<<1)) >> 1);
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <SPI2_IRQHandler+0x54>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	085b      	lsrs	r3, r3, #1
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	793b      	ldrb	r3, [r7, #4]
 8001010:	f362 0300 	bfi	r3, r2, #0, #1
 8001014:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <SPI2_IRQHandler+0x54>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	793b      	ldrb	r3, [r7, #4]
 8001022:	f362 0341 	bfi	r3, r2, #1, #1
 8001026:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <SPI2_IRQHandler+0x54>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	793b      	ldrb	r3, [r7, #4]
 8001036:	f362 0382 	bfi	r3, r2, #2, #1
 800103a:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(IRQ);
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SPI2_IRQHandler+0x58>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	7938      	ldrb	r0, [r7, #4]
 8001044:	4798      	blx	r3
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40003800 	.word	0x40003800
 8001054:	200000a8 	.word	0x200000a8

08001058 <USART1_IRQHandler>:




void USART1_IRQHandler (void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 800105c:	4b02      	ldr	r3, [pc, #8]	; (8001068 <USART1_IRQHandler+0x10>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	4798      	blx	r3
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000b0 	.word	0x200000b0

0800106c <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <USART2_IRQHandler+0x10>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	4798      	blx	r3
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000b0 	.word	0x200000b0

08001080 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001084:	4b02      	ldr	r3, [pc, #8]	; (8001090 <USART3_IRQHandler+0x10>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	4798      	blx	r3
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000b0 	.word	0x200000b0

08001094 <__libc_init_array>:
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	2600      	movs	r6, #0
 8001098:	4d0c      	ldr	r5, [pc, #48]	; (80010cc <__libc_init_array+0x38>)
 800109a:	4c0d      	ldr	r4, [pc, #52]	; (80010d0 <__libc_init_array+0x3c>)
 800109c:	1b64      	subs	r4, r4, r5
 800109e:	10a4      	asrs	r4, r4, #2
 80010a0:	42a6      	cmp	r6, r4
 80010a2:	d109      	bne.n	80010b8 <__libc_init_array+0x24>
 80010a4:	f000 f81a 	bl	80010dc <_init>
 80010a8:	2600      	movs	r6, #0
 80010aa:	4d0a      	ldr	r5, [pc, #40]	; (80010d4 <__libc_init_array+0x40>)
 80010ac:	4c0a      	ldr	r4, [pc, #40]	; (80010d8 <__libc_init_array+0x44>)
 80010ae:	1b64      	subs	r4, r4, r5
 80010b0:	10a4      	asrs	r4, r4, #2
 80010b2:	42a6      	cmp	r6, r4
 80010b4:	d105      	bne.n	80010c2 <__libc_init_array+0x2e>
 80010b6:	bd70      	pop	{r4, r5, r6, pc}
 80010b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80010bc:	4798      	blx	r3
 80010be:	3601      	adds	r6, #1
 80010c0:	e7ee      	b.n	80010a0 <__libc_init_array+0xc>
 80010c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c6:	4798      	blx	r3
 80010c8:	3601      	adds	r6, #1
 80010ca:	e7f2      	b.n	80010b2 <__libc_init_array+0x1e>
 80010cc:	08001114 	.word	0x08001114
 80010d0:	08001114 	.word	0x08001114
 80010d4:	08001114 	.word	0x08001114
 80010d8:	08001118 	.word	0x08001118

080010dc <_init>:
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	bf00      	nop
 80010e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010e2:	bc08      	pop	{r3}
 80010e4:	469e      	mov	lr, r3
 80010e6:	4770      	bx	lr

080010e8 <_fini>:
 80010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ea:	bf00      	nop
 80010ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ee:	bc08      	pop	{r3}
 80010f0:	469e      	mov	lr, r3
 80010f2:	4770      	bx	lr
