
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eb0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000fe0  08000fe0  00010fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ff8  08000ff8  00011000  2**0
                  CONTENTS
  4 .ARM          00000000  08000ff8  08000ff8  00011000  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ff8  08001000  00011000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ff8  08000ff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ffc  08000ffc  00010ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08001000  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08001000  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011000  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dda  00000000  00000000  00011029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000092c  00000000  00000000  00012e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000d78  00000000  00000000  0001372f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  000144a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c8  00000000  00000000  000146d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ac4  00000000  00000000  000148a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000030f7  00000000  00000000  00017364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a484  00000000  00000000  0001a45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000248df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000700  00000000  00000000  00024930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fc8 	.word	0x08000fc8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000fc8 	.word	0x08000fc8

08000170 <clock_init>:
//#define MCU_Act_As_Master
#define MCU_Act_As_Slave


void clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// GPIOA clock enable
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	// GPIOB clock enable
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

	// AFIO clock enable
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <Mahmoud_SPI1_IRQ_Callback>:

unsigned char data;

void Mahmoud_SPI1_IRQ_Callback(struct S_IRQ_SRC irq_src)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave
	if(irq_src.RXNE)
 80001ac:	793b      	ldrb	r3, [r7, #4]
 80001ae:	f003 0302 	and.w	r3, r3, #2
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d00c      	beq.n	80001d2 <Mahmoud_SPI1_IRQ_Callback+0x2e>
	{
		data = 0xf;
 80001b8:	4b08      	ldr	r3, [pc, #32]	; (80001dc <Mahmoud_SPI1_IRQ_Callback+0x38>)
 80001ba:	220f      	movs	r2, #15
 80001bc:	701a      	strb	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1,&data,SPI_disable);
 80001be:	2200      	movs	r2, #0
 80001c0:	4906      	ldr	r1, [pc, #24]	; (80001dc <Mahmoud_SPI1_IRQ_Callback+0x38>)
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <Mahmoud_SPI1_IRQ_Callback+0x3c>)
 80001c4:	f000 fcf4 	bl	8000bb0 <MCAL_SPI_TX_RX>
		MCAL_UART_SendData(USART1, &data, enable);
 80001c8:	2200      	movs	r2, #0
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <Mahmoud_SPI1_IRQ_Callback+0x38>)
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <Mahmoud_SPI1_IRQ_Callback+0x40>)
 80001ce:	f000 fe37 	bl	8000e40 <MCAL_UART_SendData>
	}
#endif
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	40013000 	.word	0x40013000
 80001e4:	40013800 	.word	0x40013800

080001e8 <Mahmoud_UART_IRQ_CallBack>:

void Mahmoud_UART_IRQ_CallBack(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	/* Send Data to SPI */
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0); /* Slave Select is 0 to send the data */
	MCAL_SPI_TX_RX(SPI1, &data, SPI_enable);
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1); /* Slave Select is 1 to end the data Transition */
#endif
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <main>:


int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08c      	sub	sp, #48	; 0x30
 80001f8:	af00      	add	r7, sp, #0
	clock_init();
 80001fa:	f7ff ffb9 	bl	8000170 <clock_init>

	// ================== UART Init ==================
	USART_Config USART1_Config;

	USART1_Config.BaudRate = BaudRate_115200;
 80001fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000202:	623b      	str	r3, [r7, #32]
	USART1_Config.HwFlowCtl = HwFlowCtl_None;
 8000204:	2300      	movs	r3, #0
 8000206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	USART1_Config.IRQ_Enable = IRQ_Enable_RXNEIE;
 800020a:	2320      	movs	r3, #32
 800020c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	USART1_Config.P_IRQ_CallBack = Mahmoud_UART_IRQ_CallBack;
 8000210:	4b19      	ldr	r3, [pc, #100]	; (8000278 <main+0x84>)
 8000212:	62fb      	str	r3, [r7, #44]	; 0x2c

	USART1_Config.Parity = Parity_None;
 8000214:	2300      	movs	r3, #0
 8000216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	USART1_Config.Payload_Length = Payload_Length_8B;
 800021a:	2300      	movs	r3, #0
 800021c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	USART1_Config.StopBits = StopBits_1;
 8000220:	2300      	movs	r3, #0
 8000222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	USART1_Config.USART_Mode = USART_Mode_TX_RX;
 8000226:	230c      	movs	r3, #12
 8000228:	773b      	strb	r3, [r7, #28]

	MCAL_UART_Init(USART1, &USART1_Config);
 800022a:	f107 031c 	add.w	r3, r7, #28
 800022e:	4619      	mov	r1, r3
 8000230:	4812      	ldr	r0, [pc, #72]	; (800027c <main+0x88>)
 8000232:	f000 fd43 	bl	8000cbc <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART1);
 8000236:	4811      	ldr	r0, [pc, #68]	; (800027c <main+0x88>)
 8000238:	f000 fe1e 	bl	8000e78 <MCAL_UART_GPIO_SetPins>
	// PA6 : SPI_MISO
	// PA7 : SPI_MOSI

	// Common Configurations
	SPI_Config_t SPI1_CFG;
	SPI1_CFG.CLK_Phase = CLK_PHASE_SECOND;
 800023c:	2301      	movs	r3, #1
 800023e:	81fb      	strh	r3, [r7, #14]
	SPI1_CFG.CLK_Polarity = CLK_POLARITY_IDLE_HIGH;
 8000240:	2302      	movs	r3, #2
 8000242:	81bb      	strh	r3, [r7, #12]
	SPI1_CFG.Frame_Size = FRAME_SIZE_8BIT;
 8000244:	2300      	movs	r3, #0
 8000246:	817b      	strh	r3, [r7, #10]
	SPI1_CFG.Frame_Format= FRAME_FORMAT_MSB_FIRST;
 8000248:	2300      	movs	r3, #0
 800024a:	813b      	strh	r3, [r7, #8]
	SPI1_CFG.BaudRate_Prescaler = BAUDERATE_PRESCALER_8;
 800024c:	2310      	movs	r3, #16
 800024e:	827b      	strh	r3, [r7, #18]
	SPI1_CFG.Communication_Mode = COMMUNICATION_MODE_2LINE_FULL_DUPLEX;
 8000250:	2300      	movs	r3, #0
 8000252:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
#endif


#ifdef MCU_Act_As_Slave
	SPI1_CFG.SPI_Mode = SPI_MODE_SLAVE;
 8000254:	2300      	movs	r3, #0
 8000256:	80bb      	strh	r3, [r7, #4]
	SPI1_CFG.IRQ_Enable = IRQ_ENABLE_RXNEIE;
 8000258:	2340      	movs	r3, #64	; 0x40
 800025a:	82bb      	strh	r3, [r7, #20]
	SPI1_CFG.NSS = NSS_HW_SLAVE;
 800025c:	2300      	movs	r3, #0
 800025e:	823b      	strh	r3, [r7, #16]
	SPI1_CFG.P_IRQ_CallBack = Mahmoud_SPI1_IRQ_Callback;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <main+0x8c>)
 8000262:	61bb      	str	r3, [r7, #24]
#endif
	MCAL_SPI_Init(SPI1, &SPI1_CFG);
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4619      	mov	r1, r3
 8000268:	4806      	ldr	r0, [pc, #24]	; (8000284 <main+0x90>)
 800026a:	f000 faf1 	bl	8000850 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <main+0x90>)
 8000270:	f000 fb88 	bl	8000984 <MCAL_SPI_GPIO_Set_Pins>




	/* Super Loop */
	while(1)
 8000274:	e7fe      	b.n	8000274 <main+0x80>
 8000276:	bf00      	nop
 8000278:	080001e9 	.word	0x080001e9
 800027c:	40013800 	.word	0x40013800
 8000280:	080001a5 	.word	0x080001a5
 8000284:	40013000 	.word	0x40013000

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	; (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	; (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 fe63 	bl	8000f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff9b 	bl	80001f4 <main>

080002be <LoopForever>:

LoopForever:
    b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002cc:	08001000 	.word	0x08001000
  ldr r2, =_sbss
 80002d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d4:	20000068 	.word	0x20000068

080002d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC1_2_IRQHandler>
	...

080002dc <EXTI0_IRQHandler>:
////					ISR FUNCTIONS							////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

void EXTI0_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	//	cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<< 0);
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6153      	str	r3, [r2, #20]
	// Call the CallBack Function
	GP_IRQ_CallBack[0]();
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <EXTI0_IRQHandler+0x20>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4798      	blx	r3
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010400 	.word	0x40010400
 80002fc:	20000020 	.word	0x20000020

08000300 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	//	cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<< 1);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <EXTI1_IRQHandler+0x1c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <EXTI1_IRQHandler+0x1c>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	6153      	str	r3, [r2, #20]
	// Call the CallBack Function
	GP_IRQ_CallBack[1]();
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <EXTI1_IRQHandler+0x20>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4798      	blx	r3
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400
 8000320:	20000020 	.word	0x20000020

08000324 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	//	cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<< 2);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6153      	str	r3, [r2, #20]
	// Call the CallBack Function
	GP_IRQ_CallBack[2]();
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <EXTI2_IRQHandler+0x20>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4798      	blx	r3
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010400 	.word	0x40010400
 8000344:	20000020 	.word	0x20000020

08000348 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	//	cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<< 3);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6153      	str	r3, [r2, #20]
	// Call the CallBack Function
	GP_IRQ_CallBack[3]();
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <EXTI3_IRQHandler+0x20>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4798      	blx	r3
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400
 8000368:	20000020 	.word	0x20000020

0800036c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	//	cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<< 4);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6153      	str	r3, [r2, #20]
	// Call the CallBack Function
	GP_IRQ_CallBack[4]();
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI4_IRQHandler+0x20>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4798      	blx	r3
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010400 	.word	0x40010400
 800038c:	20000020 	.word	0x20000020

08000390 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<< 5) { EXTI->PR |= (1<< 5)	;  GP_IRQ_CallBack[5]();}
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	2b00      	cmp	r3, #0
 800039e:	d008      	beq.n	80003b2 <EXTI9_5_IRQHandler+0x22>
 80003a0:	4b23      	ldr	r3, [pc, #140]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a22      	ldr	r2, [pc, #136]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6153      	str	r3, [r2, #20]
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4798      	blx	r3
	if(EXTI->PR & 1<< 6) { EXTI->PR |= (1<< 6)	;  GP_IRQ_CallBack[6]();}
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d008      	beq.n	80003d0 <EXTI9_5_IRQHandler+0x40>
 80003be:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4798      	blx	r3
	if(EXTI->PR & 1<< 7) { EXTI->PR |= (1<< 7)	;  GP_IRQ_CallBack[7]();}
 80003d0:	4b17      	ldr	r3, [pc, #92]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d008      	beq.n	80003ee <EXTI9_5_IRQHandler+0x5e>
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a13      	ldr	r2, [pc, #76]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e6:	6153      	str	r3, [r2, #20]
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	4798      	blx	r3
	if(EXTI->PR & 1<< 8) { EXTI->PR |= (1<< 8)	;  GP_IRQ_CallBack[8]();}
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d008      	beq.n	800040c <EXTI9_5_IRQHandler+0x7c>
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 8000408:	6a1b      	ldr	r3, [r3, #32]
 800040a:	4798      	blx	r3
	if(EXTI->PR & 1<< 9) { EXTI->PR |= (1<< 9)	;  GP_IRQ_CallBack[9]();}
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI9_5_IRQHandler+0x9a>
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800041e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 8000426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000428:	4798      	blx	r3

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010400 	.word	0x40010400
 8000434:	20000020 	.word	0x20000020

08000438 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<< 10) { EXTI->PR |= (1<< 10)	;  GP_IRQ_CallBack[10]();}
 800043c:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000444:	2b00      	cmp	r3, #0
 8000446:	d008      	beq.n	800045a <EXTI15_10_IRQHandler+0x22>
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a29      	ldr	r2, [pc, #164]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800044e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000452:	6153      	str	r3, [r2, #20]
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000458:	4798      	blx	r3
	if(EXTI->PR & 1<< 11) { EXTI->PR |= (1<< 11)	;  GP_IRQ_CallBack[11]();}
 800045a:	4b26      	ldr	r3, [pc, #152]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <EXTI15_10_IRQHandler+0x40>
 8000466:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800046c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	4798      	blx	r3
	if(EXTI->PR & 1<< 12) { EXTI->PR |= (1<< 12)	;  GP_IRQ_CallBack[12]();}
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d008      	beq.n	8000496 <EXTI15_10_IRQHandler+0x5e>
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a1a      	ldr	r2, [pc, #104]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800048a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800048e:	6153      	str	r3, [r2, #20]
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4798      	blx	r3
	if(EXTI->PR & 1<< 13) { EXTI->PR |= (1<< 13)	;  GP_IRQ_CallBack[13]();}
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d008      	beq.n	80004b4 <EXTI15_10_IRQHandler+0x7c>
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b2:	4798      	blx	r3
	if(EXTI->PR & 1<< 14) { EXTI->PR |= (1<< 14)	;  GP_IRQ_CallBack[14]();}
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d008      	beq.n	80004d2 <EXTI15_10_IRQHandler+0x9a>
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ca:	6153      	str	r3, [r2, #20]
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d0:	4798      	blx	r3
	if(EXTI->PR & 1<< 15) { EXTI->PR |= (1<< 15)	;  GP_IRQ_CallBack[15]();}
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d008      	beq.n	80004f0 <EXTI15_10_IRQHandler+0xb8>
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ee:	4798      	blx	r3
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010400 	.word	0x40010400
 80004f8:	20000020 	.word	0x20000020

080004fc <Get_CRLH_Position>:
#include "Stm32_F103C6_GPIO_Driver.h"

//==================================

uint8_t Get_CRLH_Position(uint32_t PinNumber)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	switch(PinNumber)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800050a:	f000 80bb 	beq.w	8000684 <Get_CRLH_Position+0x188>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000514:	f200 80b8 	bhi.w	8000688 <Get_CRLH_Position+0x18c>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800051e:	f000 80af 	beq.w	8000680 <Get_CRLH_Position+0x184>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000528:	f200 80ae 	bhi.w	8000688 <Get_CRLH_Position+0x18c>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000532:	f000 80a3 	beq.w	800067c <Get_CRLH_Position+0x180>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800053c:	f200 80a4 	bhi.w	8000688 <Get_CRLH_Position+0x18c>
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000546:	f000 8097 	beq.w	8000678 <Get_CRLH_Position+0x17c>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000550:	f200 809a 	bhi.w	8000688 <Get_CRLH_Position+0x18c>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800055a:	f000 808b 	beq.w	8000674 <Get_CRLH_Position+0x178>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000564:	f200 8090 	bhi.w	8000688 <Get_CRLH_Position+0x18c>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800056e:	d07f      	beq.n	8000670 <Get_CRLH_Position+0x174>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000576:	f200 8087 	bhi.w	8000688 <Get_CRLH_Position+0x18c>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000580:	d074      	beq.n	800066c <Get_CRLH_Position+0x170>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000588:	d87e      	bhi.n	8000688 <Get_CRLH_Position+0x18c>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000590:	d06a      	beq.n	8000668 <Get_CRLH_Position+0x16c>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000598:	d876      	bhi.n	8000688 <Get_CRLH_Position+0x18c>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b80      	cmp	r3, #128	; 0x80
 800059e:	d061      	beq.n	8000664 <Get_CRLH_Position+0x168>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b80      	cmp	r3, #128	; 0x80
 80005a4:	d870      	bhi.n	8000688 <Get_CRLH_Position+0x18c>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b20      	cmp	r3, #32
 80005aa:	d849      	bhi.n	8000640 <Get_CRLH_Position+0x144>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d06a      	beq.n	8000688 <Get_CRLH_Position+0x18c>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	2b1f      	cmp	r3, #31
 80005b8:	d866      	bhi.n	8000688 <Get_CRLH_Position+0x18c>
 80005ba:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <Get_CRLH_Position+0xc4>)
 80005bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c0:	08000649 	.word	0x08000649
 80005c4:	0800064d 	.word	0x0800064d
 80005c8:	08000689 	.word	0x08000689
 80005cc:	08000651 	.word	0x08000651
 80005d0:	08000689 	.word	0x08000689
 80005d4:	08000689 	.word	0x08000689
 80005d8:	08000689 	.word	0x08000689
 80005dc:	08000655 	.word	0x08000655
 80005e0:	08000689 	.word	0x08000689
 80005e4:	08000689 	.word	0x08000689
 80005e8:	08000689 	.word	0x08000689
 80005ec:	08000689 	.word	0x08000689
 80005f0:	08000689 	.word	0x08000689
 80005f4:	08000689 	.word	0x08000689
 80005f8:	08000689 	.word	0x08000689
 80005fc:	08000659 	.word	0x08000659
 8000600:	08000689 	.word	0x08000689
 8000604:	08000689 	.word	0x08000689
 8000608:	08000689 	.word	0x08000689
 800060c:	08000689 	.word	0x08000689
 8000610:	08000689 	.word	0x08000689
 8000614:	08000689 	.word	0x08000689
 8000618:	08000689 	.word	0x08000689
 800061c:	08000689 	.word	0x08000689
 8000620:	08000689 	.word	0x08000689
 8000624:	08000689 	.word	0x08000689
 8000628:	08000689 	.word	0x08000689
 800062c:	08000689 	.word	0x08000689
 8000630:	08000689 	.word	0x08000689
 8000634:	08000689 	.word	0x08000689
 8000638:	08000689 	.word	0x08000689
 800063c:	0800065d 	.word	0x0800065d
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b40      	cmp	r3, #64	; 0x40
 8000644:	d00c      	beq.n	8000660 <Get_CRLH_Position+0x164>
 8000646:	e01f      	b.n	8000688 <Get_CRLH_Position+0x18c>
	{
	case GPIO_PIN_0:
		return 0;
 8000648:	2300      	movs	r3, #0
 800064a:	e01e      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_1:
		return 4;
 800064c:	2304      	movs	r3, #4
 800064e:	e01c      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_2:
		return 8;
 8000650:	2308      	movs	r3, #8
 8000652:	e01a      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_3:
		return 12;
 8000654:	230c      	movs	r3, #12
 8000656:	e018      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_4:
		return 16;
 8000658:	2310      	movs	r3, #16
 800065a:	e016      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_5:
		return 20;
 800065c:	2314      	movs	r3, #20
 800065e:	e014      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_6:
		return 24;
 8000660:	2318      	movs	r3, #24
 8000662:	e012      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_7:
		return 28;
 8000664:	231c      	movs	r3, #28
 8000666:	e010      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_8:
		return 0;
 8000668:	2300      	movs	r3, #0
 800066a:	e00e      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_9:
		return 4;
 800066c:	2304      	movs	r3, #4
 800066e:	e00c      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_10:
		return 8;
 8000670:	2308      	movs	r3, #8
 8000672:	e00a      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_11:
		return 12;
 8000674:	230c      	movs	r3, #12
 8000676:	e008      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_12:
		return 16;
 8000678:	2310      	movs	r3, #16
 800067a:	e006      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_13:
		return 20;
 800067c:	2314      	movs	r3, #20
 800067e:	e004      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_14:
		return 24;
 8000680:	2318      	movs	r3, #24
 8000682:	e002      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	case GPIO_PIN_15:
		return 28;
 8000684:	231c      	movs	r3, #28
 8000686:	e000      	b.n	800068a <Get_CRLH_Position+0x18e>
		break;
	}
	return 0;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <MCAL_GPIO_Init>:
 * Note			-Stm32f103c6 MCU has GPIO A,B,C,D,E Modules
 * 				 but LQFP48 has only GPIO A,B and Part of C,D Exported as external pins from the MCU
 */

void MCAL_GPIO_Init(GPIO_Typedef *GPIOx, GPIO_PinConfig* PinConfig)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	volatile uint32_t* ConfigRegister = NULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2bff      	cmp	r3, #255	; 0xff
 80006ac:	d801      	bhi.n	80006b2 <MCAL_GPIO_Init+0x1e>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	e001      	b.n	80006b6 <MCAL_GPIO_Init+0x22>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3304      	adds	r3, #4
 80006b6:	60bb      	str	r3, [r7, #8]

	// Clear CNF1[1:0] MODE1[1:0]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff1d 	bl	80004fc <Get_CRLH_Position>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	230f      	movs	r3, #15
 80006c8:	4093      	lsls	r3, r2
 80006ca:	43da      	mvns	r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	401a      	ands	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	601a      	str	r2, [r3, #0]

	// If Pin is Output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_ALT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_ALT_PP || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP  )
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	789b      	ldrb	r3, [r3, #2]
 80006da:	2b07      	cmp	r3, #7
 80006dc:	d00b      	beq.n	80006f6 <MCAL_GPIO_Init+0x62>
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	789b      	ldrb	r3, [r3, #2]
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d007      	beq.n	80006f6 <MCAL_GPIO_Init+0x62>
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	789b      	ldrb	r3, [r3, #2]
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	d003      	beq.n	80006f6 <MCAL_GPIO_Init+0x62>
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d10e      	bne.n	8000714 <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) &0x0F) ;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	789b      	ldrb	r3, [r3, #2]
 80006fa:	3b04      	subs	r3, #4
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	b25a      	sxtb	r2, r3
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	4313      	orrs	r3, r2
 8000708:	b25b      	sxtb	r3, r3
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f003 030f 	and.w	r3, r3, #15
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	e02c      	b.n	800076e <MCAL_GPIO_Init+0xda>

	}
	// If Pin is Input
	else //MODE = 00: Input mode (reset state)
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_ANALOG || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO )
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <MCAL_GPIO_Init+0x90>
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d107      	bne.n	8000734 <MCAL_GPIO_Init+0xa0>
		{
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | 0x0) &0x0F) ;
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	789b      	ldrb	r3, [r3, #2]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	b2db      	uxtb	r3, r3
 800072c:	f003 030f 	and.w	r3, r3, #15
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e01c      	b.n	800076e <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_ALT_INPUT)  // Consider it as input floating
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	789b      	ldrb	r3, [r3, #2]
 8000738:	2b08      	cmp	r3, #8
 800073a:	d102      	bne.n	8000742 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0) &0x0F) ;
 800073c:	2304      	movs	r3, #4
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e015      	b.n	800076e <MCAL_GPIO_Init+0xda>
		}
		else // PU PD
		{
			//			Table 20. Port bit configuration table

			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) &0x0F) ;
 8000742:	2308      	movs	r3, #8
 8000744:	73fb      	strb	r3, [r7, #15]
			if(PinConfig ->GPIO_MODE == GPIO_MODE_INPUT_PU) // Write 1 on the PxODR register
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	789b      	ldrb	r3, [r3, #2]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d107      	bne.n	800075e <MCAL_GPIO_Init+0xca>
			{
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	8812      	ldrh	r2, [r2, #0]
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	e007      	b.n	800076e <MCAL_GPIO_Init+0xda>
			}
			else // Write 0 on the PxODR register
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	8812      	ldrh	r2, [r2, #0]
 8000766:	43d2      	mvns	r2, r2
 8000768:	401a      	ands	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CRL Or CRH
	(*ConfigRegister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)  );
 800076e:	7bfc      	ldrb	r4, [r7, #15]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fec1 	bl	80004fc <Get_CRLH_Position>
 800077a:	4603      	mov	r3, r0
 800077c:	fa04 f203 	lsl.w	r2, r4, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	431a      	orrs	r2, r3
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	601a      	str	r2, [r3, #0]


}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}
	...

08000794 <MCAL_RCC_GetSYS_CLKFreq>:
const uint8_t APBPrescTable[8U] = {0, 0, 0, 0, 1, 2, 3, 4};
const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8};


uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
	switch( (RCC->CFGR >> 2) & 0b11 )
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	089b      	lsrs	r3, r3, #2
 800079e:	f003 0303 	and.w	r3, r3, #3
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d00a      	beq.n	80007bc <MCAL_RCC_GetSYS_CLKFreq+0x28>
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d80a      	bhi.n	80007c0 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d002      	beq.n	80007b8 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 80007b2:	e005      	b.n	80007c0 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
	{
	case 0:
		return HSI_RC_Clk;		break;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 80007b6:	e004      	b.n	80007c2 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
	case 1:
		return HSE_Clock;		break;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 80007ba:	e002      	b.n	80007c2 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
	case 2:
		return 16000000;		break;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 80007be:	e000      	b.n	80007c2 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
	}
	return 16000000;
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000
 80007d0:	007a1200 	.word	0x007a1200
 80007d4:	00f42400 	.word	0x00f42400

080007d8 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetSYS_CLKFreq() 	>> AHBPrescTable[ ( (RCC->CFGR >> 4)& 0xF)]);
 80007dc:	f7ff ffda 	bl	8000794 <MCAL_RCC_GetSYS_CLKFreq>
 80007e0:	4602      	mov	r2, r0
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <MCAL_RCC_GetHCLKFreq+0x20>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	091b      	lsrs	r3, r3, #4
 80007e8:	f003 030f 	and.w	r3, r3, #15
 80007ec:	4903      	ldr	r1, [pc, #12]	; (80007fc <MCAL_RCC_GetHCLKFreq+0x24>)
 80007ee:	5ccb      	ldrb	r3, [r1, r3]
 80007f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	08000fe8 	.word	0x08000fe8

08000800 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	return(MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8)& 0b111)] );
 8000804:	f7ff ffe8 	bl	80007d8 <MCAL_RCC_GetHCLKFreq>
 8000808:	4602      	mov	r2, r0
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	f003 0307 	and.w	r3, r3, #7
 8000814:	4903      	ldr	r1, [pc, #12]	; (8000824 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000816:	5ccb      	ldrb	r3, [r1, r3]
 8000818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800081c:	4618      	mov	r0, r3
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	08000fe0 	.word	0x08000fe0

08000828 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	return(MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11)& 0b111)] );
 800082c:	f7ff ffd4 	bl	80007d8 <MCAL_RCC_GetHCLKFreq>
 8000830:	4602      	mov	r2, r0
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	0adb      	lsrs	r3, r3, #11
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	4903      	ldr	r1, [pc, #12]	; (800084c <MCAL_RCC_GetPCLK2Freq+0x24>)
 800083e:	5ccb      	ldrb	r3, [r1, r3]
 8000840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000844:	4618      	mov	r0, r3
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	08000fe0 	.word	0x08000fe0

08000850 <MCAL_SPI_Init>:
 * @retval 			- None
 * Note 			- Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 * 					- You have to configure RCC to select clock for the selected SPI Module
 */
void MCAL_SPI_Init(SPI_Typedef *SPIx, SPI_Config_t *Config)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	/* Safety for register, Using this technique for protect the peripheral form working before the full configurations */
	uint16_t tempReg_CR1 = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	81fb      	strh	r3, [r7, #14]
	uint16_t tempReg_CR2 = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a42      	ldr	r2, [pc, #264]	; (8000970 <MCAL_SPI_Init+0x120>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d109      	bne.n	800087e <MCAL_SPI_Init+0x2e>
	{
		/* If SPI1 Put all configurations in the global config */
		G_SPI_Config[SPI1_INDEX] = Config;
 800086a:	4a42      	ldr	r2, [pc, #264]	; (8000974 <MCAL_SPI_Init+0x124>)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	6013      	str	r3, [r2, #0]

		/* 1. Open the SPI1 RCC Clock */
		RCC_SPI1_CLK_EN();
 8000870:	4b41      	ldr	r3, [pc, #260]	; (8000978 <MCAL_SPI_Init+0x128>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a40      	ldr	r2, [pc, #256]	; (8000978 <MCAL_SPI_Init+0x128>)
 8000876:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	e00c      	b.n	8000898 <MCAL_SPI_Init+0x48>
	}
	else if(SPIx == SPI2)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a3e      	ldr	r2, [pc, #248]	; (800097c <MCAL_SPI_Init+0x12c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d108      	bne.n	8000898 <MCAL_SPI_Init+0x48>
	{
		/* If SPI2 Put all configurations in the global config */
		G_SPI_Config[SPI2_INDEX] = Config;
 8000886:	4a3b      	ldr	r2, [pc, #236]	; (8000974 <MCAL_SPI_Init+0x124>)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	6053      	str	r3, [r2, #4]

		/* 1. Open the SPI1 RCC Clock */
		RCC_SPI2_CLK_EN();
 800088c:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <MCAL_SPI_Init+0x128>)
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	4a39      	ldr	r2, [pc, #228]	; (8000978 <MCAL_SPI_Init+0x128>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	61d3      	str	r3, [r2, #28]
	}

	/* 2. Enable the SPI */
	tempReg_CR1 |= (uint16_t)(1<<6); 	/* Bit 6 SPE: SPI enable */
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089e:	81fb      	strh	r3, [r7, #14]

	/* 3. Set Master or Slave */
	tempReg_CR1 |= Config->SPI_Mode;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	881a      	ldrh	r2, [r3, #0]
 80008a4:	89fb      	ldrh	r3, [r7, #14]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	81fb      	strh	r3, [r7, #14]

	/* 4. Set Communication Mode */
	tempReg_CR1 |= Config->Communication_Mode;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	885a      	ldrh	r2, [r3, #2]
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	81fb      	strh	r3, [r7, #14]

	/* 5. Set Frame format */
	tempReg_CR1 |= Config->Frame_Format;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	889a      	ldrh	r2, [r3, #4]
 80008b8:	89fb      	ldrh	r3, [r7, #14]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	81fb      	strh	r3, [r7, #14]

	/* 6. Set Data size */
	tempReg_CR1 |= Config->Frame_Size;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	88da      	ldrh	r2, [r3, #6]
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	81fb      	strh	r3, [r7, #14]

	/* 7. Set Clock Polarity */
	tempReg_CR1 |= Config->CLK_Polarity;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	891a      	ldrh	r2, [r3, #8]
 80008cc:	89fb      	ldrh	r3, [r7, #14]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	81fb      	strh	r3, [r7, #14]

	/* 8. Set Clock Phase */
	tempReg_CR1 |= Config->CLK_Phase;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	895a      	ldrh	r2, [r3, #10]
 80008d6:	89fb      	ldrh	r3, [r7, #14]
 80008d8:	4313      	orrs	r3, r2
 80008da:	81fb      	strh	r3, [r7, #14]

	/* 9. Set Slave Select Management */
	if(Config->NSS == NSS_HW_MASTER_SS_OUTPUT_ENABLED)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	899b      	ldrh	r3, [r3, #12]
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d105      	bne.n	80008f0 <MCAL_SPI_Init+0xa0>
	{
		tempReg_CR2 |= Config->NSS;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	899a      	ldrh	r2, [r3, #12]
 80008e8:	89bb      	ldrh	r3, [r7, #12]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	81bb      	strh	r3, [r7, #12]
 80008ee:	e010      	b.n	8000912 <MCAL_SPI_Init+0xc2>
	}
	else if(Config->NSS == NSS_HW_MASTER_SS_OUTPUT_DISABLED)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	899b      	ldrh	r3, [r3, #12]
 80008f4:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d105      	bne.n	8000908 <MCAL_SPI_Init+0xb8>
	{
		tempReg_CR2 &= Config->NSS;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	899a      	ldrh	r2, [r3, #12]
 8000900:	89bb      	ldrh	r3, [r7, #12]
 8000902:	4013      	ands	r3, r2
 8000904:	81bb      	strh	r3, [r7, #12]
 8000906:	e004      	b.n	8000912 <MCAL_SPI_Init+0xc2>
	}
	else
	{
		tempReg_CR1 |= Config->NSS;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	899a      	ldrh	r2, [r3, #12]
 800090c:	89fb      	ldrh	r3, [r7, #14]
 800090e:	4313      	orrs	r3, r2
 8000910:	81fb      	strh	r3, [r7, #14]
	}

	/* 10. Set BoudRate Pre-scaler */
	tempReg_CR1 |= Config->BaudRate_Prescaler;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	89da      	ldrh	r2, [r3, #14]
 8000916:	89fb      	ldrh	r3, [r7, #14]
 8000918:	4313      	orrs	r3, r2
 800091a:	81fb      	strh	r3, [r7, #14]

	/* 11. Set Interrupt Type */
	if(Config->IRQ_Enable != IRQ_ENABLE_NONE)
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	8a1b      	ldrh	r3, [r3, #16]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d019      	beq.n	8000958 <MCAL_SPI_Init+0x108>
	{
		tempReg_CR2 |= Config->IRQ_Enable;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	8a1a      	ldrh	r2, [r3, #16]
 8000928:	89bb      	ldrh	r3, [r7, #12]
 800092a:	4313      	orrs	r3, r2
 800092c:	81bb      	strh	r3, [r7, #12]

		/* 12. Open the global Interrupt for each peripheral */
		if (SPIx == SPI1)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <MCAL_SPI_Init+0x120>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d106      	bne.n	8000944 <MCAL_SPI_Init+0xf4>
		{
			NVIC_IRQ35_SPI1_Enable;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MCAL_SPI_Init+0x130>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <MCAL_SPI_Init+0x130>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	e009      	b.n	8000958 <MCAL_SPI_Init+0x108>
		}
		else if(SPIx == SPI2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a0d      	ldr	r2, [pc, #52]	; (800097c <MCAL_SPI_Init+0x12c>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d105      	bne.n	8000958 <MCAL_SPI_Init+0x108>
		{
			NVIC_IRQ36_SPI2_Enable;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MCAL_SPI_Init+0x130>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <MCAL_SPI_Init+0x130>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
		}
	}

	/*13. Config your register using the temp register used to protect the configurations */
	SPIx->CR1 = tempReg_CR1;
 8000958:	89fa      	ldrh	r2, [r7, #14]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tempReg_CR2;
 800095e:	89ba      	ldrh	r2, [r7, #12]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	605a      	str	r2, [r3, #4]

}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40013000 	.word	0x40013000
 8000974:	2000005c 	.word	0x2000005c
 8000978:	40021000 	.word	0x40021000
 800097c:	40003800 	.word	0x40003800
 8000980:	e000e104 	.word	0xe000e104

08000984 <MCAL_SPI_GPIO_Set_Pins>:
 * @retval 			- None
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 */
void MCAL_SPI_GPIO_Set_Pins(SPI_Typedef *SPIx)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig SPI_GPIO_Config;

	/* Depending the recommendation in data sheet -> Table 25. SPI 	*/
	/*  "SPI pin-out"    "Configuration"     "GPIO configuration" 	*/
	if (SPIx == SPI1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a83      	ldr	r2, [pc, #524]	; (8000b9c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d178      	bne.n	8000a86 <MCAL_SPI_GPIO_Set_Pins+0x102>
	{
		if(G_SPI_Config[SPI1_INDEX]->SPI_Mode == SPI_MODE_MASTER) /* Master */
 8000994:	4b82      	ldr	r3, [pc, #520]	; (8000ba0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	2b04      	cmp	r3, #4
 800099c:	d143      	bne.n	8000a26 <MCAL_SPI_GPIO_Set_Pins+0xa2>
		{
			/* PA4 : SPI1_NSS */
			switch (G_SPI_Config[SPI1_INDEX]->NSS)
 800099e:	4b80      	ldr	r3, [pc, #512]	; (8000ba0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	899b      	ldrh	r3, [r3, #12]
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d00e      	beq.n	80009c6 <MCAL_SPI_GPIO_Set_Pins+0x42>
 80009a8:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d117      	bne.n	80009e0 <MCAL_SPI_GPIO_Set_Pins+0x5c>
			{
			 	 /* Input */
				case NSS_HW_MASTER_SS_OUTPUT_DISABLED:
					/* Hardware Master/Slave Input Floating */
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 80009b0:	2310      	movs	r3, #16
 80009b2:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	4879      	ldr	r0, [pc, #484]	; (8000ba4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009c0:	f7ff fe68 	bl	8000694 <MCAL_GPIO_Init>
					break;
 80009c4:	e00c      	b.n	80009e0 <MCAL_SPI_GPIO_Set_Pins+0x5c>

				/* Output */
				case NSS_HW_MASTER_SS_OUTPUT_ENABLED:
					/* Hardware Master/NNS Output Alternate function push-pull */
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 80009c6:	2310      	movs	r3, #16
 80009c8:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 80009ca:	2306      	movs	r3, #6
 80009cc:	73bb      	strb	r3, [r7, #14]
					SPI_GPIO_Config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4619      	mov	r1, r3
 80009d8:	4872      	ldr	r0, [pc, #456]	; (8000ba4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009da:	f7ff fe5b 	bl	8000694 <MCAL_GPIO_Init>
					break;
 80009de:	bf00      	nop
			}

			/* PA5 : SPI1_SCK */
			/* Master Alternate function push-pull */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 80009e0:	2320      	movs	r3, #32
 80009e2:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 80009e4:	2306      	movs	r3, #6
 80009e6:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	486c      	ldr	r0, [pc, #432]	; (8000ba4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009f4:	f7ff fe4e 	bl	8000694 <MCAL_GPIO_Init>

			/* PA6 : SPI1_MISO */
			/* Full duplex / master Input floating / Input pull-up */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_6;
 80009f8:	2340      	movs	r3, #64	; 0x40
 80009fa:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009fc:	2301      	movs	r3, #1
 80009fe:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4867      	ldr	r0, [pc, #412]	; (8000ba4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a08:	f7ff fe44 	bl	8000694 <MCAL_GPIO_Init>

			/* PA7 : SPI1_MOSI */
			/* Full duplex / master Alternate function push-pull */
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_7;
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 8000a10:	2306      	movs	r3, #6
 8000a12:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4861      	ldr	r0, [pc, #388]	; (8000ba4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a20:	f7ff fe38 	bl	8000694 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15;
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
		}
	}
}
 8000a24:	e0b5      	b.n	8000b92 <MCAL_SPI_GPIO_Set_Pins+0x20e>
			if(G_SPI_Config[SPI1_INDEX]->NSS == NSS_HW_SLAVE)
 8000a26:	4b5e      	ldr	r3, [pc, #376]	; (8000ba0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	899b      	ldrh	r3, [r3, #12]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d109      	bne.n	8000a44 <MCAL_SPI_GPIO_Set_Pins+0xc0>
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_4;
 8000a30:	2310      	movs	r3, #16
 8000a32:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a34:	2301      	movs	r3, #1
 8000a36:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4859      	ldr	r0, [pc, #356]	; (8000ba4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a40:	f7ff fe28 	bl	8000694 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 8000a44:	2320      	movs	r3, #32
 8000a46:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4619      	mov	r1, r3
 8000a52:	4854      	ldr	r0, [pc, #336]	; (8000ba4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a54:	f7ff fe1e 	bl	8000694 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_6;
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4619      	mov	r1, r3
 8000a6a:	484e      	ldr	r0, [pc, #312]	; (8000ba4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a6c:	f7ff fe12 	bl	8000694 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_7;
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4849      	ldr	r0, [pc, #292]	; (8000ba4 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a80:	f7ff fe08 	bl	8000694 <MCAL_GPIO_Init>
}
 8000a84:	e085      	b.n	8000b92 <MCAL_SPI_GPIO_Set_Pins+0x20e>
	else if(SPIx == SPI2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a47      	ldr	r2, [pc, #284]	; (8000ba8 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	f040 8081 	bne.w	8000b92 <MCAL_SPI_GPIO_Set_Pins+0x20e>
		if(G_SPI_Config[SPI2_INDEX]->SPI_Mode == SPI_MODE_MASTER) /* Master */
 8000a90:	4b43      	ldr	r3, [pc, #268]	; (8000ba0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d148      	bne.n	8000b2c <MCAL_SPI_GPIO_Set_Pins+0x1a8>
			switch (G_SPI_Config[SPI2_INDEX]->NSS)
 8000a9a:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	899b      	ldrh	r3, [r3, #12]
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d00f      	beq.n	8000ac4 <MCAL_SPI_GPIO_Set_Pins+0x140>
 8000aa4:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d119      	bne.n	8000ae0 <MCAL_SPI_GPIO_Set_Pins+0x15c>
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12;
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	4619      	mov	r1, r3
 8000abc:	483b      	ldr	r0, [pc, #236]	; (8000bac <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000abe:	f7ff fde9 	bl	8000694 <MCAL_GPIO_Init>
					break;
 8000ac2:	e00d      	b.n	8000ae0 <MCAL_SPI_GPIO_Set_Pins+0x15c>
					SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 8000aca:	2306      	movs	r3, #6
 8000acc:	73bb      	strb	r3, [r7, #14]
					SPI_GPIO_Config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4834      	ldr	r0, [pc, #208]	; (8000bac <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000ada:	f7ff fddb 	bl	8000694 <MCAL_GPIO_Init>
					break;
 8000ade:	bf00      	nop
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_13;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae4:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	482d      	ldr	r0, [pc, #180]	; (8000bac <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000af6:	f7ff fdcd 	bl	8000694 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_14;
 8000afa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000afe:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b00:	2301      	movs	r3, #1
 8000b02:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4828      	ldr	r0, [pc, #160]	; (8000bac <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b0c:	f7ff fdc2 	bl	8000694 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15;
 8000b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b14:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 8000b16:	2306      	movs	r3, #6
 8000b18:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	4821      	ldr	r0, [pc, #132]	; (8000bac <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b26:	f7ff fdb5 	bl	8000694 <MCAL_GPIO_Init>
}
 8000b2a:	e032      	b.n	8000b92 <MCAL_SPI_GPIO_Set_Pins+0x20e>
			if(G_SPI_Config[SPI2_INDEX]->NSS == NSS_HW_SLAVE)
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	899b      	ldrh	r3, [r3, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10a      	bne.n	8000b4c <MCAL_SPI_GPIO_Set_Pins+0x1c8>
				SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_12;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4619      	mov	r1, r3
 8000b46:	4819      	ldr	r0, [pc, #100]	; (8000bac <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b48:	f7ff fda4 	bl	8000694 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_13;
 8000b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b50:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b52:	2301      	movs	r3, #1
 8000b54:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4813      	ldr	r0, [pc, #76]	; (8000bac <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b5e:	f7ff fd99 	bl	8000694 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_14;
 8000b62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b66:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 8000b68:	2306      	movs	r3, #6
 8000b6a:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b78:	f7ff fd8c 	bl	8000694 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PinNumber = GPIO_PIN_15;
 8000b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b80:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b82:	2301      	movs	r3, #1
 8000b84:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b8e:	f7ff fd81 	bl	8000694 <MCAL_GPIO_Init>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40013000 	.word	0x40013000
 8000ba0:	2000005c 	.word	0x2000005c
 8000ba4:	40010800 	.word	0x40010800
 8000ba8:	40003800 	.word	0x40003800
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <MCAL_SPI_TX_RX>:
 * @param [in] 		- Polling_En : Enable Polling or Disable it
 * @retval 			- None
 * Note 			- None
 */
void MCAL_SPI_TX_RX(SPI_Typedef *SPIx, uint16_t *pTxBuffer, enum Polling_Mechanism Polling_En)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	71fb      	strb	r3, [r7, #7]
	if(Polling_En == SPI_enable)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d106      	bne.n	8000bd2 <MCAL_SPI_TX_RX+0x22>
	{
		/* Wait for transmission complete */
		while(! (SPIx->SR & SPI_SR_TXE));
 8000bc4:	bf00      	nop
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f9      	beq.n	8000bc6 <MCAL_SPI_TX_RX+0x16>
	}

	/* Start transmission, Write data to SPI data register */
	SPIx->DR = *(pTxBuffer);
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	60da      	str	r2, [r3, #12]

/* =================================================== */

	if(Polling_En == SPI_enable)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d106      	bne.n	8000bf0 <MCAL_SPI_TX_RX+0x40>
	{
		/* Wait for reception complete */
		while(! (SPIx->SR & SPI_SR_RXNE));
 8000be2:	bf00      	nop
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f9      	beq.n	8000be4 <MCAL_SPI_TX_RX+0x34>
	}

	/* Start reception, Write data to SPI data register */
	*(pTxBuffer) = SPIx->DR;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	801a      	strh	r2, [r3, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <SPI1_IRQHandler>:
/* ================================================================ */
/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ;

	IRQ.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <SPI1_IRQHandler+0x54>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	793b      	ldrb	r3, [r7, #4]
 8000c18:	f362 0300 	bfi	r3, r2, #0, #1
 8000c1c:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <SPI1_IRQHandler+0x54>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	793b      	ldrb	r3, [r7, #4]
 8000c2a:	f362 0341 	bfi	r3, r2, #1, #1
 8000c2e:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <SPI1_IRQHandler+0x54>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	091b      	lsrs	r3, r3, #4
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	793b      	ldrb	r3, [r7, #4]
 8000c3e:	f362 0382 	bfi	r3, r2, #2, #1
 8000c42:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(IRQ);
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SPI1_IRQHandler+0x58>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	7938      	ldrb	r0, [r7, #4]
 8000c4c:	4798      	blx	r3
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40013000 	.word	0x40013000
 8000c5c:	2000005c 	.word	0x2000005c

08000c60 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ;

	IRQ.TXE = ((SPI2->SR & (1<<1)) >> 1);
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <SPI2_IRQHandler+0x54>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	793b      	ldrb	r3, [r7, #4]
 8000c74:	f362 0300 	bfi	r3, r2, #0, #1
 8000c78:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <SPI2_IRQHandler+0x54>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	793b      	ldrb	r3, [r7, #4]
 8000c86:	f362 0341 	bfi	r3, r2, #1, #1
 8000c8a:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <SPI2_IRQHandler+0x54>)
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	793b      	ldrb	r3, [r7, #4]
 8000c9a:	f362 0382 	bfi	r3, r2, #2, #1
 8000c9e:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(IRQ);
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SPI2_IRQHandler+0x58>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	7938      	ldrb	r0, [r7, #4]
 8000ca8:	4798      	blx	r3
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40003800 	.word	0x40003800
 8000cb8:	2000005c 	.word	0x2000005c

08000cbc <MCAL_UART_Init>:
 * @param [in] 	-USART_Config all UART configuration
 * @retval		-None
 * Note			-Support for now Async. and 8Mhz clock
 */
void MCAL_UART_Init(USART_Typedef* USARTx, USART_Config* UART_Config )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;


	Global_UART_Config = UART_Config;
 8000cc6:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <MCAL_UART_Init+0x168>)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	6013      	str	r3, [r2, #0]

	//Enable clock for the USART
	if(USARTx == USART1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a56      	ldr	r2, [pc, #344]	; (8000e28 <MCAL_UART_Init+0x16c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d106      	bne.n	8000ce2 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000cd4:	4b55      	ldr	r3, [pc, #340]	; (8000e2c <MCAL_UART_Init+0x170>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a54      	ldr	r2, [pc, #336]	; (8000e2c <MCAL_UART_Init+0x170>)
 8000cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	e014      	b.n	8000d0c <MCAL_UART_Init+0x50>
	else if(USARTx == USART2)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a52      	ldr	r2, [pc, #328]	; (8000e30 <MCAL_UART_Init+0x174>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d106      	bne.n	8000cf8 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000cea:	4b50      	ldr	r3, [pc, #320]	; (8000e2c <MCAL_UART_Init+0x170>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	4a4f      	ldr	r2, [pc, #316]	; (8000e2c <MCAL_UART_Init+0x170>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	61d3      	str	r3, [r2, #28]
 8000cf6:	e009      	b.n	8000d0c <MCAL_UART_Init+0x50>
	else if(USARTx == USART3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a4e      	ldr	r2, [pc, #312]	; (8000e34 <MCAL_UART_Init+0x178>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d105      	bne.n	8000d0c <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000d00:	4b4a      	ldr	r3, [pc, #296]	; (8000e2c <MCAL_UART_Init+0x170>)
 8000d02:	69db      	ldr	r3, [r3, #28]
 8000d04:	4a49      	ldr	r2, [pc, #292]	; (8000e2c <MCAL_UART_Init+0x170>)
 8000d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0a:	61d3      	str	r3, [r2, #28]

	// Enable USART Module
	//	Bit 13 UE: USART enable
	USARTx->CR1 |= (1 << 13);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	60da      	str	r2, [r3, #12]

	// UART Mode
	USARTx->CR1 |= UART_Config->USART_Mode;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	7812      	ldrb	r2, [r2, #0]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60da      	str	r2, [r3, #12]

	// Payload Length
	//	Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	7a12      	ldrb	r2, [r2, #8]
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	60da      	str	r2, [r3, #12]

	//Configuration of Parity Mode
	USARTx->CR1 |= UART_Config->Parity;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	7a52      	ldrb	r2, [r2, #9]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60da      	str	r2, [r3, #12]

	//Configuration of Number of stop Bits
	USARTx->CR2 |= UART_Config->StopBits;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	7a92      	ldrb	r2, [r2, #10]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	611a      	str	r2, [r3, #16]

	//Configuration of Hardware Flow Control
	USARTx->CR3 |= UART_Config->HwFlowCtl;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	7ad2      	ldrb	r2, [r2, #11]
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	615a      	str	r2, [r3, #20]

	//Configuration of Baud Rate
	if(USARTx == USART1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a31      	ldr	r2, [pc, #196]	; (8000e28 <MCAL_UART_Init+0x16c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d103      	bne.n	8000d6e <MCAL_UART_Init+0xb2>
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000d66:	f7ff fd5f 	bl	8000828 <MCAL_RCC_GetPCLK2Freq>
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	e002      	b.n	8000d74 <MCAL_UART_Init+0xb8>
	else
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000d6e:	f7ff fd47 	bl	8000800 <MCAL_RCC_GetPCLK1Freq>
 8000d72:	60f8      	str	r0, [r7, #12]
	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d80:	0119      	lsls	r1, r3, #4
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	009a      	lsls	r2, r3, #2
 8000d8c:	441a      	add	r2, r3
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000da4:	2064      	movs	r0, #100	; 0x64
 8000da6:	fb00 f303 	mul.w	r3, r0, r3
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <MCAL_UART_Init+0x17c>)
 8000db0:	fba2 2303 	umull	r2, r3, r2, r3
 8000db4:	095b      	lsrs	r3, r3, #5
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	609a      	str	r2, [r3, #8]

	// Enable/Disable Interrupt
	if(UART_Config->IRQ_Enable != IRQ_Enable_None)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	7b1b      	ldrb	r3, [r3, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d026      	beq.n	8000e1a <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	7b12      	ldrb	r2, [r2, #12]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60da      	str	r2, [r3, #12]

		//		Enable NVIC for UARTx
		if(USARTx == USART1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <MCAL_UART_Init+0x16c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d106      	bne.n	8000df0 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable ;
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MCAL_UART_Init+0x180>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <MCAL_UART_Init+0x180>)
 8000de8:	f043 0320 	orr.w	r3, r3, #32
 8000dec:	6013      	str	r3, [r2, #0]

		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}

}
 8000dee:	e014      	b.n	8000e1a <MCAL_UART_Init+0x15e>
		else if(USARTx == USART2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <MCAL_UART_Init+0x174>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d106      	bne.n	8000e06 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MCAL_UART_Init+0x180>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <MCAL_UART_Init+0x180>)
 8000dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	e009      	b.n	8000e1a <MCAL_UART_Init+0x15e>
		else if(USARTx == USART3)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <MCAL_UART_Init+0x178>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d105      	bne.n	8000e1a <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MCAL_UART_Init+0x180>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <MCAL_UART_Init+0x180>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e18:	6013      	str	r3, [r2, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000064 	.word	0x20000064
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40004800 	.word	0x40004800
 8000e38:	51eb851f 	.word	0x51eb851f
 8000e3c:	e000e104 	.word	0xe000e104

08000e40 <MCAL_UART_SendData>:
 * 					- the value written in the MSB ( bit 7 or bit 8 depending on the data length ) has no effect
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */
void MCAL_UART_SendData(USART_Typedef* USARTx, uint16_t* pTxBuffer, enum polling_mechanism PollingEn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	71fb      	strb	r3, [r7, #7]

	if (PollingEn == enable)
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d106      	bne.n	8000e62 <MCAL_UART_SendData+0x22>
	{
		while (!(USARTx->SR & 1<<7) );
 8000e54:	bf00      	nop
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f9      	beq.n	8000e56 <MCAL_UART_SendData+0x16>
	{
		USARTx->DR = (*pTxBuffer & (uint16_t) 0x01FF);
	}
	else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t) 0xFF);
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	605a      	str	r2, [r3, #4]

	}
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
	...

08000e78 <MCAL_UART_GPIO_SetPins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_SetPins(USART_Typedef* USARTx)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig PinCfg;
	if(USARTx == USART1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d118      	bne.n	8000eba <MCAL_UART_GPIO_SetPins+0x42>
		//PA10 --> RX
		//PA11 --> CTS
		//PA12 --> RTS

		/* PA09 --> TX */
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 8000e8e:	2306      	movs	r3, #6
 8000e90:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4825      	ldr	r0, [pc, #148]	; (8000f34 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000e9e:	f7ff fbf9 	bl	8000694 <MCAL_GPIO_Init>

		/* PA10 --> RX */
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_ALT_INPUT;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4820      	ldr	r0, [pc, #128]	; (8000f34 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000eb4:	f7ff fbee 	bl	8000694 <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}

}
 8000eb8:	e036      	b.n	8000f28 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <MCAL_UART_GPIO_SetPins+0xc0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d116      	bne.n	8000ef0 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000ed6:	f7ff fbdd 	bl	8000694 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000eda:	2308      	movs	r3, #8
 8000edc:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_ALT_INPUT;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000eea:	f7ff fbd3 	bl	8000694 <MCAL_GPIO_Init>
}
 8000eee:	e01b      	b.n	8000f28 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MCAL_UART_GPIO_SetPins+0xc4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d117      	bne.n	8000f28 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efc:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_ALT_PP;
 8000efe:	2306      	movs	r3, #6
 8000f00:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10_MHz;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000f0e:	f7ff fbc1 	bl	8000694 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f16:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_ALT_INPUT;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000f24:	f7ff fbb6 	bl	8000694 <MCAL_GPIO_Init>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40013800 	.word	0x40013800
 8000f34:	40010800 	.word	0x40010800
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	40004800 	.word	0x40004800
 8000f40:	40010c00 	.word	0x40010c00

08000f44 <USART1_IRQHandler>:




void USART1_IRQHandler (void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <USART1_IRQHandler+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	4798      	blx	r3
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000064 	.word	0x20000064

08000f58 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000f5c:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <USART2_IRQHandler+0x10>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	4798      	blx	r3
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000064 	.word	0x20000064

08000f6c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000f70:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <USART3_IRQHandler+0x10>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4798      	blx	r3
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000064 	.word	0x20000064

08000f80 <__libc_init_array>:
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	2600      	movs	r6, #0
 8000f84:	4d0c      	ldr	r5, [pc, #48]	; (8000fb8 <__libc_init_array+0x38>)
 8000f86:	4c0d      	ldr	r4, [pc, #52]	; (8000fbc <__libc_init_array+0x3c>)
 8000f88:	1b64      	subs	r4, r4, r5
 8000f8a:	10a4      	asrs	r4, r4, #2
 8000f8c:	42a6      	cmp	r6, r4
 8000f8e:	d109      	bne.n	8000fa4 <__libc_init_array+0x24>
 8000f90:	f000 f81a 	bl	8000fc8 <_init>
 8000f94:	2600      	movs	r6, #0
 8000f96:	4d0a      	ldr	r5, [pc, #40]	; (8000fc0 <__libc_init_array+0x40>)
 8000f98:	4c0a      	ldr	r4, [pc, #40]	; (8000fc4 <__libc_init_array+0x44>)
 8000f9a:	1b64      	subs	r4, r4, r5
 8000f9c:	10a4      	asrs	r4, r4, #2
 8000f9e:	42a6      	cmp	r6, r4
 8000fa0:	d105      	bne.n	8000fae <__libc_init_array+0x2e>
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
 8000fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fa8:	4798      	blx	r3
 8000faa:	3601      	adds	r6, #1
 8000fac:	e7ee      	b.n	8000f8c <__libc_init_array+0xc>
 8000fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fb2:	4798      	blx	r3
 8000fb4:	3601      	adds	r6, #1
 8000fb6:	e7f2      	b.n	8000f9e <__libc_init_array+0x1e>
 8000fb8:	08000ff8 	.word	0x08000ff8
 8000fbc:	08000ff8 	.word	0x08000ff8
 8000fc0:	08000ff8 	.word	0x08000ff8
 8000fc4:	08000ffc 	.word	0x08000ffc

08000fc8 <_init>:
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	bf00      	nop
 8000fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fce:	bc08      	pop	{r3}
 8000fd0:	469e      	mov	lr, r3
 8000fd2:	4770      	bx	lr

08000fd4 <_fini>:
 8000fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd6:	bf00      	nop
 8000fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fda:	bc08      	pop	{r3}
 8000fdc:	469e      	mov	lr, r3
 8000fde:	4770      	bx	lr
